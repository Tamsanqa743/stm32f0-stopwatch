ARM GAS  /tmp/cc64fjmy.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"Assignment-THWTAM001.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/Assignment-THWTAM001.c"
  18              		.section	.text.delay,"ax",%progbits
  19              		.align	1
  20              		.global	delay
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	delay:
  26              	.LVL0:
  27              	.LFB45:
  28              		.file 2 "Core/Inc/lcd_stm32f0.c"
   1:Core/Inc/lcd_stm32f0.c **** //********************************************************************
   2:Core/Inc/lcd_stm32f0.c **** //*                      EEE2046F STM32F0                            *
   3:Core/Inc/lcd_stm32f0.c **** //*                         LCD MODULE                               *
   4:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
   5:Core/Inc/lcd_stm32f0.c **** //* WRITTEN BY:    Copyright (C) Samuel Ginsberg 2004                *
   6:Core/Inc/lcd_stm32f0.c **** //* PORTED TO STM32F0 dev board by James Gowans, 2014                *
   7:Core/Inc/lcd_stm32f0.c **** //* MODIFIED BY:   Robyn Verrinder                                   *
   8:Core/Inc/lcd_stm32f0.c **** //* DATE CREATED:  2004                                              *
   9:Core/Inc/lcd_stm32f0.c **** //* PORTED:	   2014						     *
  10:Core/Inc/lcd_stm32f0.c **** //* MODIFIED:      03-08-2015                                        *
  11:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  12:Core/Inc/lcd_stm32f0.c **** //* PROGRAMMED IN: ECLIPSE IDE Luna Service Release 1 (4.4.1)        *
  13:Core/Inc/lcd_stm32f0.c **** //* DEV. BOARD:    UCT STM32 Development Board                       *
  14:Core/Inc/lcd_stm32f0.c **** //* TARGET:	   STMicroelectronics STM32F051C6                    *
  15:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  16:Core/Inc/lcd_stm32f0.c **** //* DESCRIPTION:   This code contains common functions to communicate*
  17:Core/Inc/lcd_stm32f0.c **** //*                with the LCD module connected to the STM32 uC.    *
  18:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  19:Core/Inc/lcd_stm32f0.c **** //* LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used) *
  20:Core/Inc/lcd_stm32f0.c **** //*                - Two lines used                                  *
  21:Core/Inc/lcd_stm32f0.c **** //*                - Flashing cursor                                 *
  22:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  23:Core/Inc/lcd_stm32f0.c **** //* CONNECTIONS:                                                     *
  24:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  25:Core/Inc/lcd_stm32f0.c **** //* LCD PINS   | NAME                    | CONNECTED TO              *
  26:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  27:Core/Inc/lcd_stm32f0.c **** //* 1............VSS.......................GND                       *
  28:Core/Inc/lcd_stm32f0.c **** //* 2............VDD.......................+5V                       *
  29:Core/Inc/lcd_stm32f0.c **** //* 3............CONTRAST..................POT 2                     *
  30:Core/Inc/lcd_stm32f0.c **** //* 4............RS  - Register Select.....PC14 (LCD_RS)             *
ARM GAS  /tmp/cc64fjmy.s 			page 2


  31:Core/Inc/lcd_stm32f0.c **** //* 5............RW  - Read/Write..........GND                       *
  32:Core/Inc/lcd_stm32f0.c **** //* 6............E   - Enable..............PC15 (LCD_E)              *
  33:Core/Inc/lcd_stm32f0.c **** //* 7............D0  - Data line 0.........GND                       *
  34:Core/Inc/lcd_stm32f0.c **** //* 8............D1  - Data line 1.........GND                       *
  35:Core/Inc/lcd_stm32f0.c **** //* 9............D2  - Data line 2.........GND                       *
  36:Core/Inc/lcd_stm32f0.c **** //* 10...........D3  - Data line 3.........GND                       *
  37:Core/Inc/lcd_stm32f0.c **** //* 11...........D4  - Data line 4.........PB8  (LCD_D4)             *
  38:Core/Inc/lcd_stm32f0.c **** //* 12...........D5  - Data line 5.........PB9  (LCD_D5)             *
  39:Core/Inc/lcd_stm32f0.c **** //* 13...........D6  - Data line 6.........PA12 (LCD_D6)             *
  40:Core/Inc/lcd_stm32f0.c **** //* 14...........D7  - Data line 7.........PA15 (LCD_D7)             *
  41:Core/Inc/lcd_stm32f0.c **** //* 15...........CATHLED...................NC                        *
  42:Core/Inc/lcd_stm32f0.c **** //* 16...........ANODELED..................NC                        *
  43:Core/Inc/lcd_stm32f0.c **** //********************************************************************
  44:Core/Inc/lcd_stm32f0.c **** // INCLUDE FILES
  45:Core/Inc/lcd_stm32f0.c **** //====================================================================
  46:Core/Inc/lcd_stm32f0.c **** #include "lcd_stm32f0.h"
  47:Core/Inc/lcd_stm32f0.c **** #include "stm32f0xx.h"
  48:Core/Inc/lcd_stm32f0.c **** //====================================================================
  49:Core/Inc/lcd_stm32f0.c **** // SEND COMMAND CODE TO LCD - LCD_Command(command)
  50:Core/Inc/lcd_stm32f0.c **** //====================================================================
  51:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sends a command to the LCD. Care is taken
  52:Core/Inc/lcd_stm32f0.c **** //              not to interfere with the other lines on the port.
  53:Core/Inc/lcd_stm32f0.c **** //
  54:Core/Inc/lcd_stm32f0.c **** //              As we are using a microcontroller to control the LCD
  55:Core/Inc/lcd_stm32f0.c **** //              we use 4-bit mode to save on number of lines used to
  56:Core/Inc/lcd_stm32f0.c **** //              connect to the LCD. This means that an 8-bit command
  57:Core/Inc/lcd_stm32f0.c **** //              must be split into two sets of 4-bits (upper and lower)
  58:Core/Inc/lcd_stm32f0.c **** //              These sets must be transmitted
  59:Core/Inc/lcd_stm32f0.c **** //====================================================================
  60:Core/Inc/lcd_stm32f0.c **** // USEFUL COMMANDS:
  61:Core/Inc/lcd_stm32f0.c **** //                  - POWER_UP:      Power up initialization for the lcd
  62:Core/Inc/lcd_stm32f0.c **** //                  - FOURBIT_MODE:  Sets LCD for 4-bit mode
  63:Core/Inc/lcd_stm32f0.c **** //                  - TWOLINE_MODE:  Sets up 2 lines and character size
  64:Core/Inc/lcd_stm32f0.c **** //                  - SETUP_CURSOR:  Turn display on and set up cursor
  65:Core/Inc/lcd_stm32f0.c **** //                  - CLEAR:         Clear screen
  66:Core/Inc/lcd_stm32f0.c **** //                  - CURSOR_HOME:   Cursor home
  67:Core/Inc/lcd_stm32f0.c **** //                  - LINE_TWO:      Line 2
  68:Core/Inc/lcd_stm32f0.c **** //
  69:Core/Inc/lcd_stm32f0.c **** //====================================================================
  70:Core/Inc/lcd_stm32f0.c **** 
  71:Core/Inc/lcd_stm32f0.c **** void lcd_command(unsigned char command)
  72:Core/Inc/lcd_stm32f0.c **** {
  73:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
  74:Core/Inc/lcd_stm32f0.c **** 
  75:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
  76:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
  77:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
  78:Core/Inc/lcd_stm32f0.c ****     {
  79:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
  80:Core/Inc/lcd_stm32f0.c ****     }
  81:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
  82:Core/Inc/lcd_stm32f0.c ****     {
  83:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
  84:Core/Inc/lcd_stm32f0.c ****     }
  85:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
  86:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
  87:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /tmp/cc64fjmy.s 			page 3


  88:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
  89:Core/Inc/lcd_stm32f0.c ****     }
  90:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D6
  91:Core/Inc/lcd_stm32f0.c ****     {
  92:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
  93:Core/Inc/lcd_stm32f0.c ****     }
  94:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
  95:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
  96:Core/Inc/lcd_stm32f0.c ****     {
  97:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;	
  98:Core/Inc/lcd_stm32f0.c ****     }
  99:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D5
 100:Core/Inc/lcd_stm32f0.c ****     {
 101:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 102:Core/Inc/lcd_stm32f0.c ****     }
 103:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 104:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 105:Core/Inc/lcd_stm32f0.c ****     {
 106:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 107:Core/Inc/lcd_stm32f0.c ****     }
 108:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 109:Core/Inc/lcd_stm32f0.c ****     {
 110:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 111:Core/Inc/lcd_stm32f0.c ****     }
 112:Core/Inc/lcd_stm32f0.c **** 
 113:Core/Inc/lcd_stm32f0.c ****     pulse_strobe ();			// Send data
 114:Core/Inc/lcd_stm32f0.c **** 
 115:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 116:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 117:Core/Inc/lcd_stm32f0.c ****     {
 118:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
 119:Core/Inc/lcd_stm32f0.c ****     }
 120:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
 121:Core/Inc/lcd_stm32f0.c ****     {
 122:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
 123:Core/Inc/lcd_stm32f0.c ****     }
 124:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 125:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 126:Core/Inc/lcd_stm32f0.c ****     {
 127:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
 128:Core/Inc/lcd_stm32f0.c ****     }
 129:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D6
 130:Core/Inc/lcd_stm32f0.c ****     {
 131:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
 132:Core/Inc/lcd_stm32f0.c ****     }
 133:Core/Inc/lcd_stm32f0.c ****     // DATALINE 5
 134:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 135:Core/Inc/lcd_stm32f0.c ****     {
 136:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;         
 137:Core/Inc/lcd_stm32f0.c ****     }
 138:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D5
 139:Core/Inc/lcd_stm32f0.c ****     {
 140:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 141:Core/Inc/lcd_stm32f0.c ****     }
 142:Core/Inc/lcd_stm32f0.c ****     // DATALINE 4
 143:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 144:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /tmp/cc64fjmy.s 			page 4


 145:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 146:Core/Inc/lcd_stm32f0.c ****     }
 147:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 148:Core/Inc/lcd_stm32f0.c ****     {
 149:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 150:Core/Inc/lcd_stm32f0.c ****     }
 151:Core/Inc/lcd_stm32f0.c **** 
 152:Core/Inc/lcd_stm32f0.c ****     pulse_strobe();			// Send data
 153:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 154:Core/Inc/lcd_stm32f0.c **** }
 155:Core/Inc/lcd_stm32f0.c **** 
 156:Core/Inc/lcd_stm32f0.c **** //====================================================================
 157:Core/Inc/lcd_stm32f0.c **** // INITIALISE LCD - LCD_Init()
 158:Core/Inc/lcd_stm32f0.c **** //====================================================================
 159:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sets up the port lines for the LCD and
 160:Core/Inc/lcd_stm32f0.c **** //              intialises the module for use.
 161:Core/Inc/lcd_stm32f0.c **** //====================================================================
 162:Core/Inc/lcd_stm32f0.c **** // LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used)
 163:Core/Inc/lcd_stm32f0.c **** //                - Two lines used
 164:Core/Inc/lcd_stm32f0.c **** //                - Flashing cursor
 165:Core/Inc/lcd_stm32f0.c **** //====================================================================
 166:Core/Inc/lcd_stm32f0.c **** 
 167:Core/Inc/lcd_stm32f0.c **** void init_LCD(void)
 168:Core/Inc/lcd_stm32f0.c **** {
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 171:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 172:Core/Inc/lcd_stm32f0.c **** 
 173:Core/Inc/lcd_stm32f0.c ****     GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 174:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 175:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 176:Core/Inc/lcd_stm32f0.c **** 
 177:Core/Inc/lcd_stm32f0.c ****     delay(30000);			// Allow the LCD some power up time (~30ms)
 178:Core/Inc/lcd_stm32f0.c **** 
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(POWER_UP);		// Power up initialization for the lcd
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 183:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 184:Core/Inc/lcd_stm32f0.c **** }
 185:Core/Inc/lcd_stm32f0.c **** 
 186:Core/Inc/lcd_stm32f0.c **** //====================================================================
 187:Core/Inc/lcd_stm32f0.c **** // WRITE A SINGLE CHARACTER TO THE LCD - LCD_PutChar(character)
 188:Core/Inc/lcd_stm32f0.c **** //====================================================================
 189:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Puts a single character on the LCD at the next position
 190:Core/Inc/lcd_stm32f0.c **** //              on the screen. The character to be printed is in the input
 191:Core/Inc/lcd_stm32f0.c **** //              parameter. For numbers, letters and other common characters
 192:Core/Inc/lcd_stm32f0.c **** //              the ASCII code will produce correct display.
 193:Core/Inc/lcd_stm32f0.c **** //
 194:Core/Inc/lcd_stm32f0.c **** //              Refer to the Hitachi HD44780 datasheet for full character
 195:Core/Inc/lcd_stm32f0.c **** //              set information.
 196:Core/Inc/lcd_stm32f0.c **** //====================================================================
 197:Core/Inc/lcd_stm32f0.c **** 
 198:Core/Inc/lcd_stm32f0.c ****  void lcd_putchar(unsigned char character)
 199:Core/Inc/lcd_stm32f0.c **** {
 200:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 201:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  /tmp/cc64fjmy.s 			page 5


 202:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
 203:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 204:Core/Inc/lcd_stm32f0.c ****         {
 205:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 206:Core/Inc/lcd_stm32f0.c ****         }
 207:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D7
 208:Core/Inc/lcd_stm32f0.c ****         {
 209:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 210:Core/Inc/lcd_stm32f0.c ****         }
 211:Core/Inc/lcd_stm32f0.c ****         // DATALINE 6
 212:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)      
 213:Core/Inc/lcd_stm32f0.c **** 	{
 214:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 215:Core/Inc/lcd_stm32f0.c ****         }
 216:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D6
 217:Core/Inc/lcd_stm32f0.c **** 
 218:Core/Inc/lcd_stm32f0.c ****         {
 219:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 220:Core/Inc/lcd_stm32f0.c ****         }
 221:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 222:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 223:Core/Inc/lcd_stm32f0.c **** 
 224:Core/Inc/lcd_stm32f0.c ****         {
 225:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;                 
 226:Core/Inc/lcd_stm32f0.c **** 	}
 227:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D5
 228:Core/Inc/lcd_stm32f0.c ****         {
 229:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 230:Core/Inc/lcd_stm32f0.c ****         }
 231:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 232:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 233:Core/Inc/lcd_stm32f0.c ****         {
 234:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 235:Core/Inc/lcd_stm32f0.c ****         }
 236:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D4
 237:Core/Inc/lcd_stm32f0.c ****         {
 238:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 239:Core/Inc/lcd_stm32f0.c ****         }
 240:Core/Inc/lcd_stm32f0.c **** 
 241:Core/Inc/lcd_stm32f0.c ****         pulse_strobe ();		// Send data
 242:Core/Inc/lcd_stm32f0.c **** 
 243:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 244:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 245:Core/Inc/lcd_stm32f0.c ****         {
 246:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 247:Core/Inc/lcd_stm32f0.c ****         }
 248:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D7
 249:Core/Inc/lcd_stm32f0.c ****         {
 250:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 251:Core/Inc/lcd_stm32f0.c ****         }
 252:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 253:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)      
 254:Core/Inc/lcd_stm32f0.c **** 	{
 255:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 256:Core/Inc/lcd_stm32f0.c ****         }
 257:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D6
 258:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc64fjmy.s 			page 6


 259:Core/Inc/lcd_stm32f0.c ****         {
 260:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 261:Core/Inc/lcd_stm32f0.c ****         }
 262:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 263:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 264:Core/Inc/lcd_stm32f0.c ****         {
 265:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;       
 266:Core/Inc/lcd_stm32f0.c **** 	}
 267:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D5
 268:Core/Inc/lcd_stm32f0.c ****         {
 269:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 270:Core/Inc/lcd_stm32f0.c ****         }
 271:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 272:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 273:Core/Inc/lcd_stm32f0.c ****         {
 274:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 275:Core/Inc/lcd_stm32f0.c ****         }
 276:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D4
 277:Core/Inc/lcd_stm32f0.c ****         {
 278:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 279:Core/Inc/lcd_stm32f0.c ****         }
 280:Core/Inc/lcd_stm32f0.c **** 
 281:Core/Inc/lcd_stm32f0.c ****         pulse_strobe();			// Send data
 282:Core/Inc/lcd_stm32f0.c **** }
 283:Core/Inc/lcd_stm32f0.c **** 
 284:Core/Inc/lcd_stm32f0.c **** //====================================================================
 285:Core/Inc/lcd_stm32f0.c **** // WRITE A STRING TO THE LCD - LCD_PutString(ptr_String)
 286:Core/Inc/lcd_stm32f0.c **** //====================================================================
 287:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Writes a string to the LCD
 288:Core/Inc/lcd_stm32f0.c **** //====================================================================
 289:Core/Inc/lcd_stm32f0.c **** 
 290:Core/Inc/lcd_stm32f0.c **** void lcd_putstring(char *instring)
 291:Core/Inc/lcd_stm32f0.c **** {
 292:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 293:Core/Inc/lcd_stm32f0.c **** 
 294:Core/Inc/lcd_stm32f0.c ****     while (instring[count])		// Until the null terminator is reached
 295:Core/Inc/lcd_stm32f0.c ****     {
 296:Core/Inc/lcd_stm32f0.c ****     	lcd_putchar(instring[count]);	// Write each character to LCD
 297:Core/Inc/lcd_stm32f0.c **** 	    count++;
 298:Core/Inc/lcd_stm32f0.c **** 	 }
 299:Core/Inc/lcd_stm32f0.c **** }
 300:Core/Inc/lcd_stm32f0.c **** 
 301:Core/Inc/lcd_stm32f0.c **** 
 302:Core/Inc/lcd_stm32f0.c **** //====================================================================
 303:Core/Inc/lcd_stm32f0.c **** // PULSE STROBE - Pulse_Strobe()
 304:Core/Inc/lcd_stm32f0.c **** //====================================================================
 305:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
 306:Core/Inc/lcd_stm32f0.c **** //====================================================================
 307:Core/Inc/lcd_stm32f0.c **** 
 308:Core/Inc/lcd_stm32f0.c **** void pulse_strobe(void)
 309:Core/Inc/lcd_stm32f0.c **** {
 310:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 311:Core/Inc/lcd_stm32f0.c **** 
 312:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 313:Core/Inc/lcd_stm32f0.c **** 
 314:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 315:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc64fjmy.s 			page 7


 316:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 317:Core/Inc/lcd_stm32f0.c **** 
 318:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 319:Core/Inc/lcd_stm32f0.c **** 
 320:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 321:Core/Inc/lcd_stm32f0.c **** }
 322:Core/Inc/lcd_stm32f0.c **** 
 323:Core/Inc/lcd_stm32f0.c **** 
 324:Core/Inc/lcd_stm32f0.c **** //====================================================================
 325:Core/Inc/lcd_stm32f0.c **** // LOOP DELAY - delay(microseconds)
 326:Core/Inc/lcd_stm32f0.c **** //====================================================================
 327:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: A delay used by the LCD functions.
 328:Core/Inc/lcd_stm32f0.c **** //====================================================================
 329:Core/Inc/lcd_stm32f0.c **** 
 330:Core/Inc/lcd_stm32f0.c **** void delay(unsigned int microseconds)
 331:Core/Inc/lcd_stm32f0.c **** {
  29              		.loc 2 331 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 2 331 1 is_stmt 0 view .LVU1
  35 0000 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 8
 332:Core/Inc/lcd_stm32f0.c **** 	  volatile unsigned int counter;
  37              		.loc 2 332 4 is_stmt 1 view .LVU2
 333:Core/Inc/lcd_stm32f0.c **** 	  microseconds *= 3;
  38              		.loc 2 333 4 view .LVU3
  39              		.loc 2 333 17 is_stmt 0 view .LVU4
  40 0002 4300     		lsls	r3, r0, #1
  41 0004 1818     		adds	r0, r3, r0
  42              	.LVL1:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  43              		.loc 2 334 4 is_stmt 1 view .LVU5
  44              		.loc 2 334 16 is_stmt 0 view .LVU6
  45 0006 0023     		movs	r3, #0
  46 0008 0193     		str	r3, [sp, #4]
  47              		.loc 2 334 4 view .LVU7
  48 000a 04E0     		b	.L2
  49              	.L3:
 335:Core/Inc/lcd_stm32f0.c **** 	  {
 336:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  50              		.loc 2 336 6 is_stmt 1 discriminator 3 view .LVU8
  51              		.syntax divided
  52              	@ 336 "Core/Inc/lcd_stm32f0.c" 1
  53 000c C046     		nop
  54              	@ 0 "" 2
 337:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  55              		.loc 2 337 6 discriminator 3 view .LVU9
  56              	@ 337 "Core/Inc/lcd_stm32f0.c" 1
  57 000e C046     		nop
  58              	@ 0 "" 2
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  59              		.loc 2 334 50 discriminator 3 view .LVU10
  60              		.thumb
  61              		.syntax unified
  62 0010 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cc64fjmy.s 			page 8


  63 0012 0133     		adds	r3, r3, #1
  64 0014 0193     		str	r3, [sp, #4]
  65              	.L2:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  66              		.loc 2 334 28 discriminator 1 view .LVU11
  67 0016 019B     		ldr	r3, [sp, #4]
  68 0018 8342     		cmp	r3, r0
  69 001a F7D3     		bcc	.L3
 338:Core/Inc/lcd_stm32f0.c **** 	  }
 339:Core/Inc/lcd_stm32f0.c **** }
  70              		.loc 2 339 1 is_stmt 0 view .LVU12
  71 001c 02B0     		add	sp, sp, #8
  72              		@ sp needed
  73 001e 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE45:
  77              		.section	.text.pulse_strobe,"ax",%progbits
  78              		.align	1
  79              		.global	pulse_strobe
  80              		.syntax unified
  81              		.code	16
  82              		.thumb_func
  84              	pulse_strobe:
  85              	.LFB44:
 309:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
  86              		.loc 2 309 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 70B5     		push	{r4, r5, r6, lr}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 4, -16
  93              		.cfi_offset 5, -12
  94              		.cfi_offset 6, -8
  95              		.cfi_offset 14, -4
 310:Core/Inc/lcd_stm32f0.c **** 
  96              		.loc 2 310 5 view .LVU14
  97 0002 1420     		movs	r0, #20
  98 0004 FFF7FEFF 		bl	delay
  99              	.LVL2:
 312:Core/Inc/lcd_stm32f0.c **** 
 100              		.loc 2 312 5 view .LVU15
 312:Core/Inc/lcd_stm32f0.c **** 
 101              		.loc 2 312 10 is_stmt 0 view .LVU16
 102 0008 0A4C     		ldr	r4, .L5
 103 000a A369     		ldr	r3, [r4, #24]
 312:Core/Inc/lcd_stm32f0.c **** 
 104              		.loc 2 312 17 view .LVU17
 105 000c 8025     		movs	r5, #128
 106 000e 2D02     		lsls	r5, r5, #8
 107 0010 2B43     		orrs	r3, r5
 108 0012 A361     		str	r3, [r4, #24]
 314:Core/Inc/lcd_stm32f0.c **** 
 109              		.loc 2 314 5 is_stmt 1 view .LVU18
 110 0014 1420     		movs	r0, #20
 111 0016 FFF7FEFF 		bl	delay
 112              	.LVL3:
ARM GAS  /tmp/cc64fjmy.s 			page 9


 316:Core/Inc/lcd_stm32f0.c **** 
 113              		.loc 2 316 5 view .LVU19
 316:Core/Inc/lcd_stm32f0.c **** 
 114              		.loc 2 316 10 is_stmt 0 view .LVU20
 115 001a A269     		ldr	r2, [r4, #24]
 316:Core/Inc/lcd_stm32f0.c **** 
 116              		.loc 2 316 17 view .LVU21
 117 001c 8023     		movs	r3, #128
 118 001e 1B06     		lsls	r3, r3, #24
 119 0020 1343     		orrs	r3, r2
 120 0022 A361     		str	r3, [r4, #24]
 318:Core/Inc/lcd_stm32f0.c **** 
 121              		.loc 2 318 5 is_stmt 1 view .LVU22
 122 0024 1420     		movs	r0, #20
 123 0026 FFF7FEFF 		bl	delay
 124              	.LVL4:
 320:Core/Inc/lcd_stm32f0.c **** }
 125              		.loc 2 320 5 view .LVU23
 320:Core/Inc/lcd_stm32f0.c **** }
 126              		.loc 2 320 10 is_stmt 0 view .LVU24
 127 002a A369     		ldr	r3, [r4, #24]
 320:Core/Inc/lcd_stm32f0.c **** }
 128              		.loc 2 320 17 view .LVU25
 129 002c 1D43     		orrs	r5, r3
 130 002e A561     		str	r5, [r4, #24]
 321:Core/Inc/lcd_stm32f0.c **** 
 131              		.loc 2 321 1 view .LVU26
 132              		@ sp needed
 133 0030 70BD     		pop	{r4, r5, r6, pc}
 134              	.L6:
 135 0032 C046     		.align	2
 136              	.L5:
 137 0034 00080048 		.word	1207961600
 138              		.cfi_endproc
 139              	.LFE44:
 141              		.section	.text.lcd_putchar,"ax",%progbits
 142              		.align	1
 143              		.global	lcd_putchar
 144              		.syntax unified
 145              		.code	16
 146              		.thumb_func
 148              	lcd_putchar:
 149              	.LVL5:
 150              	.LFB42:
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 151              		.loc 2 199 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 155              		.loc 2 199 1 is_stmt 0 view .LVU28
 156 0000 10B5     		push	{r4, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
 160 0002 0400     		movs	r4, r0
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  /tmp/cc64fjmy.s 			page 10


 161              		.loc 2 200 2 is_stmt 1 view .LVU29
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 162              		.loc 2 200 7 is_stmt 0 view .LVU30
 163 0004 454A     		ldr	r2, .L25
 164 0006 9169     		ldr	r1, [r2, #24]
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 165              		.loc 2 200 14 view .LVU31
 166 0008 8023     		movs	r3, #128
 167 000a DB01     		lsls	r3, r3, #7
 168 000c 0B43     		orrs	r3, r1
 169 000e 9361     		str	r3, [r2, #24]
 203:Core/Inc/lcd_stm32f0.c ****         {
 170              		.loc 2 203 9 is_stmt 1 view .LVU32
 203:Core/Inc/lcd_stm32f0.c ****         {
 171              		.loc 2 203 32 is_stmt 0 view .LVU33
 172 0010 43B2     		sxtb	r3, r0
 203:Core/Inc/lcd_stm32f0.c ****         {
 173              		.loc 2 203 12 view .LVU34
 174 0012 002B     		cmp	r3, #0
 175 0014 46DB     		blt	.L24
 209:Core/Inc/lcd_stm32f0.c ****         }
 176              		.loc 2 209 10 is_stmt 1 view .LVU35
 209:Core/Inc/lcd_stm32f0.c ****         }
 177              		.loc 2 209 15 is_stmt 0 view .LVU36
 178 0016 9022     		movs	r2, #144
 179 0018 D205     		lsls	r2, r2, #23
 180 001a 9169     		ldr	r1, [r2, #24]
 209:Core/Inc/lcd_stm32f0.c ****         }
 181              		.loc 2 209 22 view .LVU37
 182 001c 8023     		movs	r3, #128
 183 001e 1B06     		lsls	r3, r3, #24
 184 0020 0B43     		orrs	r3, r1
 185 0022 9361     		str	r3, [r2, #24]
 186              	.L9:
 212:Core/Inc/lcd_stm32f0.c **** 	{
 187              		.loc 2 212 9 is_stmt 1 view .LVU38
 212:Core/Inc/lcd_stm32f0.c **** 	{
 188              		.loc 2 212 12 is_stmt 0 view .LVU39
 189 0024 6306     		lsls	r3, r4, #25
 190 0026 45D5     		bpl	.L10
 214:Core/Inc/lcd_stm32f0.c ****         }
 191              		.loc 2 214 13 is_stmt 1 view .LVU40
 214:Core/Inc/lcd_stm32f0.c ****         }
 192              		.loc 2 214 18 is_stmt 0 view .LVU41
 193 0028 9022     		movs	r2, #144
 194 002a D205     		lsls	r2, r2, #23
 195 002c 9169     		ldr	r1, [r2, #24]
 214:Core/Inc/lcd_stm32f0.c ****         }
 196              		.loc 2 214 25 view .LVU42
 197 002e 8023     		movs	r3, #128
 198 0030 5B01     		lsls	r3, r3, #5
 199 0032 0B43     		orrs	r3, r1
 200 0034 9361     		str	r3, [r2, #24]
 201              	.L11:
 222:Core/Inc/lcd_stm32f0.c **** 
 202              		.loc 2 222 9 is_stmt 1 view .LVU43
 222:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc64fjmy.s 			page 11


 203              		.loc 2 222 12 is_stmt 0 view .LVU44
 204 0036 A306     		lsls	r3, r4, #26
 205 0038 44D5     		bpl	.L12
 225:Core/Inc/lcd_stm32f0.c **** 	}
 206              		.loc 2 225 10 is_stmt 1 view .LVU45
 225:Core/Inc/lcd_stm32f0.c **** 	}
 207              		.loc 2 225 15 is_stmt 0 view .LVU46
 208 003a 394A     		ldr	r2, .L25+4
 209 003c 9169     		ldr	r1, [r2, #24]
 225:Core/Inc/lcd_stm32f0.c **** 	}
 210              		.loc 2 225 22 view .LVU47
 211 003e 8023     		movs	r3, #128
 212 0040 9B00     		lsls	r3, r3, #2
 213 0042 0B43     		orrs	r3, r1
 214 0044 9361     		str	r3, [r2, #24]
 215              	.L13:
 232:Core/Inc/lcd_stm32f0.c ****         {
 216              		.loc 2 232 9 is_stmt 1 view .LVU48
 232:Core/Inc/lcd_stm32f0.c ****         {
 217              		.loc 2 232 12 is_stmt 0 view .LVU49
 218 0046 E306     		lsls	r3, r4, #27
 219 0048 43D5     		bpl	.L14
 234:Core/Inc/lcd_stm32f0.c ****         }
 220              		.loc 2 234 10 is_stmt 1 view .LVU50
 234:Core/Inc/lcd_stm32f0.c ****         }
 221              		.loc 2 234 15 is_stmt 0 view .LVU51
 222 004a 354A     		ldr	r2, .L25+4
 223 004c 9169     		ldr	r1, [r2, #24]
 234:Core/Inc/lcd_stm32f0.c ****         }
 224              		.loc 2 234 22 view .LVU52
 225 004e 8023     		movs	r3, #128
 226 0050 5B00     		lsls	r3, r3, #1
 227 0052 0B43     		orrs	r3, r1
 228 0054 9361     		str	r3, [r2, #24]
 229              	.L15:
 241:Core/Inc/lcd_stm32f0.c **** 
 230              		.loc 2 241 9 is_stmt 1 view .LVU53
 231 0056 FFF7FEFF 		bl	pulse_strobe
 232              	.LVL6:
 244:Core/Inc/lcd_stm32f0.c ****         {
 233              		.loc 2 244 9 view .LVU54
 244:Core/Inc/lcd_stm32f0.c ****         {
 234              		.loc 2 244 12 is_stmt 0 view .LVU55
 235 005a 2307     		lsls	r3, r4, #28
 236 005c 40D5     		bpl	.L16
 246:Core/Inc/lcd_stm32f0.c ****         }
 237              		.loc 2 246 10 is_stmt 1 view .LVU56
 246:Core/Inc/lcd_stm32f0.c ****         }
 238              		.loc 2 246 15 is_stmt 0 view .LVU57
 239 005e 9022     		movs	r2, #144
 240 0060 D205     		lsls	r2, r2, #23
 241 0062 9169     		ldr	r1, [r2, #24]
 246:Core/Inc/lcd_stm32f0.c ****         }
 242              		.loc 2 246 22 view .LVU58
 243 0064 8023     		movs	r3, #128
 244 0066 1B02     		lsls	r3, r3, #8
 245 0068 0B43     		orrs	r3, r1
ARM GAS  /tmp/cc64fjmy.s 			page 12


 246 006a 9361     		str	r3, [r2, #24]
 247              	.L17:
 253:Core/Inc/lcd_stm32f0.c **** 	{
 248              		.loc 2 253 9 is_stmt 1 view .LVU59
 253:Core/Inc/lcd_stm32f0.c **** 	{
 249              		.loc 2 253 12 is_stmt 0 view .LVU60
 250 006c 6307     		lsls	r3, r4, #29
 251 006e 3FD5     		bpl	.L18
 255:Core/Inc/lcd_stm32f0.c ****         }
 252              		.loc 2 255 13 is_stmt 1 view .LVU61
 255:Core/Inc/lcd_stm32f0.c ****         }
 253              		.loc 2 255 18 is_stmt 0 view .LVU62
 254 0070 9022     		movs	r2, #144
 255 0072 D205     		lsls	r2, r2, #23
 256 0074 9169     		ldr	r1, [r2, #24]
 255:Core/Inc/lcd_stm32f0.c ****         }
 257              		.loc 2 255 25 view .LVU63
 258 0076 8023     		movs	r3, #128
 259 0078 5B01     		lsls	r3, r3, #5
 260 007a 0B43     		orrs	r3, r1
 261 007c 9361     		str	r3, [r2, #24]
 262              	.L19:
 263:Core/Inc/lcd_stm32f0.c ****         {
 263              		.loc 2 263 9 is_stmt 1 view .LVU64
 263:Core/Inc/lcd_stm32f0.c ****         {
 264              		.loc 2 263 12 is_stmt 0 view .LVU65
 265 007e A307     		lsls	r3, r4, #30
 266 0080 3ED5     		bpl	.L20
 265:Core/Inc/lcd_stm32f0.c **** 	}
 267              		.loc 2 265 10 is_stmt 1 view .LVU66
 265:Core/Inc/lcd_stm32f0.c **** 	}
 268              		.loc 2 265 15 is_stmt 0 view .LVU67
 269 0082 274A     		ldr	r2, .L25+4
 270 0084 9169     		ldr	r1, [r2, #24]
 265:Core/Inc/lcd_stm32f0.c **** 	}
 271              		.loc 2 265 22 view .LVU68
 272 0086 8023     		movs	r3, #128
 273 0088 9B00     		lsls	r3, r3, #2
 274 008a 0B43     		orrs	r3, r1
 275 008c 9361     		str	r3, [r2, #24]
 276              	.L21:
 272:Core/Inc/lcd_stm32f0.c ****         {
 277              		.loc 2 272 9 is_stmt 1 view .LVU69
 272:Core/Inc/lcd_stm32f0.c ****         {
 278              		.loc 2 272 12 is_stmt 0 view .LVU70
 279 008e E407     		lsls	r4, r4, #31
 280 0090 3DD5     		bpl	.L22
 274:Core/Inc/lcd_stm32f0.c ****         }
 281              		.loc 2 274 10 is_stmt 1 view .LVU71
 274:Core/Inc/lcd_stm32f0.c ****         }
 282              		.loc 2 274 15 is_stmt 0 view .LVU72
 283 0092 234A     		ldr	r2, .L25+4
 284 0094 9169     		ldr	r1, [r2, #24]
 274:Core/Inc/lcd_stm32f0.c ****         }
 285              		.loc 2 274 22 view .LVU73
 286 0096 8023     		movs	r3, #128
 287 0098 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/cc64fjmy.s 			page 13


 288 009a 0B43     		orrs	r3, r1
 289 009c 9361     		str	r3, [r2, #24]
 290              	.L23:
 281:Core/Inc/lcd_stm32f0.c **** }
 291              		.loc 2 281 9 is_stmt 1 view .LVU74
 292 009e FFF7FEFF 		bl	pulse_strobe
 293              	.LVL7:
 282:Core/Inc/lcd_stm32f0.c **** 
 294              		.loc 2 282 1 is_stmt 0 view .LVU75
 295              		@ sp needed
 296 00a2 10BD     		pop	{r4, pc}
 297              	.LVL8:
 298              	.L24:
 205:Core/Inc/lcd_stm32f0.c ****         }
 299              		.loc 2 205 10 is_stmt 1 view .LVU76
 205:Core/Inc/lcd_stm32f0.c ****         }
 300              		.loc 2 205 15 is_stmt 0 view .LVU77
 301 00a4 9022     		movs	r2, #144
 302 00a6 D205     		lsls	r2, r2, #23
 303 00a8 9169     		ldr	r1, [r2, #24]
 205:Core/Inc/lcd_stm32f0.c ****         }
 304              		.loc 2 205 22 view .LVU78
 305 00aa 8023     		movs	r3, #128
 306 00ac 1B02     		lsls	r3, r3, #8
 307 00ae 0B43     		orrs	r3, r1
 308 00b0 9361     		str	r3, [r2, #24]
 309 00b2 B7E7     		b	.L9
 310              	.L10:
 219:Core/Inc/lcd_stm32f0.c ****         }
 311              		.loc 2 219 13 is_stmt 1 view .LVU79
 219:Core/Inc/lcd_stm32f0.c ****         }
 312              		.loc 2 219 18 is_stmt 0 view .LVU80
 313 00b4 9022     		movs	r2, #144
 314 00b6 D205     		lsls	r2, r2, #23
 315 00b8 9169     		ldr	r1, [r2, #24]
 219:Core/Inc/lcd_stm32f0.c ****         }
 316              		.loc 2 219 25 view .LVU81
 317 00ba 8023     		movs	r3, #128
 318 00bc 5B05     		lsls	r3, r3, #21
 319 00be 0B43     		orrs	r3, r1
 320 00c0 9361     		str	r3, [r2, #24]
 321 00c2 B8E7     		b	.L11
 322              	.L12:
 229:Core/Inc/lcd_stm32f0.c ****         }
 323              		.loc 2 229 10 is_stmt 1 view .LVU82
 229:Core/Inc/lcd_stm32f0.c ****         }
 324              		.loc 2 229 15 is_stmt 0 view .LVU83
 325 00c4 164A     		ldr	r2, .L25+4
 326 00c6 9169     		ldr	r1, [r2, #24]
 229:Core/Inc/lcd_stm32f0.c ****         }
 327              		.loc 2 229 22 view .LVU84
 328 00c8 8023     		movs	r3, #128
 329 00ca 9B04     		lsls	r3, r3, #18
 330 00cc 0B43     		orrs	r3, r1
 331 00ce 9361     		str	r3, [r2, #24]
 332 00d0 B9E7     		b	.L13
 333              	.L14:
ARM GAS  /tmp/cc64fjmy.s 			page 14


 238:Core/Inc/lcd_stm32f0.c ****         }
 334              		.loc 2 238 10 is_stmt 1 view .LVU85
 238:Core/Inc/lcd_stm32f0.c ****         }
 335              		.loc 2 238 15 is_stmt 0 view .LVU86
 336 00d2 134A     		ldr	r2, .L25+4
 337 00d4 9169     		ldr	r1, [r2, #24]
 238:Core/Inc/lcd_stm32f0.c ****         }
 338              		.loc 2 238 22 view .LVU87
 339 00d6 8023     		movs	r3, #128
 340 00d8 5B04     		lsls	r3, r3, #17
 341 00da 0B43     		orrs	r3, r1
 342 00dc 9361     		str	r3, [r2, #24]
 343 00de BAE7     		b	.L15
 344              	.LVL9:
 345              	.L16:
 250:Core/Inc/lcd_stm32f0.c ****         }
 346              		.loc 2 250 10 is_stmt 1 view .LVU88
 250:Core/Inc/lcd_stm32f0.c ****         }
 347              		.loc 2 250 15 is_stmt 0 view .LVU89
 348 00e0 9022     		movs	r2, #144
 349 00e2 D205     		lsls	r2, r2, #23
 350 00e4 9169     		ldr	r1, [r2, #24]
 250:Core/Inc/lcd_stm32f0.c ****         }
 351              		.loc 2 250 22 view .LVU90
 352 00e6 8023     		movs	r3, #128
 353 00e8 1B06     		lsls	r3, r3, #24
 354 00ea 0B43     		orrs	r3, r1
 355 00ec 9361     		str	r3, [r2, #24]
 356 00ee BDE7     		b	.L17
 357              	.L18:
 260:Core/Inc/lcd_stm32f0.c ****         }
 358              		.loc 2 260 13 is_stmt 1 view .LVU91
 260:Core/Inc/lcd_stm32f0.c ****         }
 359              		.loc 2 260 18 is_stmt 0 view .LVU92
 360 00f0 9022     		movs	r2, #144
 361 00f2 D205     		lsls	r2, r2, #23
 362 00f4 9169     		ldr	r1, [r2, #24]
 260:Core/Inc/lcd_stm32f0.c ****         }
 363              		.loc 2 260 25 view .LVU93
 364 00f6 8023     		movs	r3, #128
 365 00f8 5B05     		lsls	r3, r3, #21
 366 00fa 0B43     		orrs	r3, r1
 367 00fc 9361     		str	r3, [r2, #24]
 368 00fe BEE7     		b	.L19
 369              	.L20:
 269:Core/Inc/lcd_stm32f0.c ****         }
 370              		.loc 2 269 10 is_stmt 1 view .LVU94
 269:Core/Inc/lcd_stm32f0.c ****         }
 371              		.loc 2 269 15 is_stmt 0 view .LVU95
 372 0100 074A     		ldr	r2, .L25+4
 373 0102 9169     		ldr	r1, [r2, #24]
 269:Core/Inc/lcd_stm32f0.c ****         }
 374              		.loc 2 269 22 view .LVU96
 375 0104 8023     		movs	r3, #128
 376 0106 9B04     		lsls	r3, r3, #18
 377 0108 0B43     		orrs	r3, r1
 378 010a 9361     		str	r3, [r2, #24]
ARM GAS  /tmp/cc64fjmy.s 			page 15


 379 010c BFE7     		b	.L21
 380              	.L22:
 278:Core/Inc/lcd_stm32f0.c ****         }
 381              		.loc 2 278 10 is_stmt 1 view .LVU97
 278:Core/Inc/lcd_stm32f0.c ****         }
 382              		.loc 2 278 15 is_stmt 0 view .LVU98
 383 010e 044A     		ldr	r2, .L25+4
 384 0110 9169     		ldr	r1, [r2, #24]
 278:Core/Inc/lcd_stm32f0.c ****         }
 385              		.loc 2 278 22 view .LVU99
 386 0112 8023     		movs	r3, #128
 387 0114 5B04     		lsls	r3, r3, #17
 388 0116 0B43     		orrs	r3, r1
 389 0118 9361     		str	r3, [r2, #24]
 390 011a C0E7     		b	.L23
 391              	.L26:
 392              		.align	2
 393              	.L25:
 394 011c 00080048 		.word	1207961600
 395 0120 00040048 		.word	1207960576
 396              		.cfi_endproc
 397              	.LFE42:
 399              		.section	.text.lcd_putstring,"ax",%progbits
 400              		.align	1
 401              		.global	lcd_putstring
 402              		.syntax unified
 403              		.code	16
 404              		.thumb_func
 406              	lcd_putstring:
 407              	.LVL10:
 408              	.LFB43:
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 409              		.loc 2 291 1 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 413              		.loc 2 291 1 is_stmt 0 view .LVU101
 414 0000 70B5     		push	{r4, r5, r6, lr}
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 4, -16
 417              		.cfi_offset 5, -12
 418              		.cfi_offset 6, -8
 419              		.cfi_offset 14, -4
 420 0002 0500     		movs	r5, r0
 292:Core/Inc/lcd_stm32f0.c **** 
 421              		.loc 2 292 5 is_stmt 1 view .LVU102
 422              	.LVL11:
 294:Core/Inc/lcd_stm32f0.c ****     {
 423              		.loc 2 294 5 view .LVU103
 292:Core/Inc/lcd_stm32f0.c **** 
 424              		.loc 2 292 19 is_stmt 0 view .LVU104
 425 0004 0024     		movs	r4, #0
 294:Core/Inc/lcd_stm32f0.c ****     {
 426              		.loc 2 294 11 view .LVU105
 427 0006 03E0     		b	.L28
 428              	.LVL12:
ARM GAS  /tmp/cc64fjmy.s 			page 16


 429              	.L29:
 296:Core/Inc/lcd_stm32f0.c **** 	    count++;
 430              		.loc 2 296 6 is_stmt 1 view .LVU106
 431 0008 FFF7FEFF 		bl	lcd_putchar
 432              	.LVL13:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 433              		.loc 2 297 6 view .LVU107
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 434              		.loc 2 297 11 is_stmt 0 view .LVU108
 435 000c 0134     		adds	r4, r4, #1
 436              	.LVL14:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 437              		.loc 2 297 11 view .LVU109
 438 000e E4B2     		uxtb	r4, r4
 439              	.LVL15:
 440              	.L28:
 294:Core/Inc/lcd_stm32f0.c ****     {
 441              		.loc 2 294 12 is_stmt 1 view .LVU110
 294:Core/Inc/lcd_stm32f0.c ****     {
 442              		.loc 2 294 20 is_stmt 0 view .LVU111
 443 0010 285D     		ldrb	r0, [r5, r4]
 294:Core/Inc/lcd_stm32f0.c ****     {
 444              		.loc 2 294 12 view .LVU112
 445 0012 0028     		cmp	r0, #0
 446 0014 F8D1     		bne	.L29
 299:Core/Inc/lcd_stm32f0.c **** 
 447              		.loc 2 299 1 view .LVU113
 448              		@ sp needed
 449              	.LVL16:
 450              	.LVL17:
 299:Core/Inc/lcd_stm32f0.c **** 
 451              		.loc 2 299 1 view .LVU114
 452 0016 70BD     		pop	{r4, r5, r6, pc}
 453              		.cfi_endproc
 454              	.LFE43:
 456              		.section	.text.lcd_command,"ax",%progbits
 457              		.align	1
 458              		.global	lcd_command
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 463              	lcd_command:
 464              	.LVL18:
 465              	.LFB40:
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 466              		.loc 2 72 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 470              		.loc 2 72 1 is_stmt 0 view .LVU116
 471 0000 10B5     		push	{r4, lr}
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 475 0002 0400     		movs	r4, r0
  73:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc64fjmy.s 			page 17


 476              		.loc 2 73 5 is_stmt 1 view .LVU117
  73:Core/Inc/lcd_stm32f0.c **** 
 477              		.loc 2 73 10 is_stmt 0 view .LVU118
 478 0004 474A     		ldr	r2, .L48
 479 0006 9169     		ldr	r1, [r2, #24]
  73:Core/Inc/lcd_stm32f0.c **** 
 480              		.loc 2 73 17 view .LVU119
 481 0008 8023     		movs	r3, #128
 482 000a DB05     		lsls	r3, r3, #23
 483 000c 0B43     		orrs	r3, r1
 484 000e 9361     		str	r3, [r2, #24]
  77:Core/Inc/lcd_stm32f0.c ****     {
 485              		.loc 2 77 5 is_stmt 1 view .LVU120
  77:Core/Inc/lcd_stm32f0.c ****     {
 486              		.loc 2 77 26 is_stmt 0 view .LVU121
 487 0010 43B2     		sxtb	r3, r0
  77:Core/Inc/lcd_stm32f0.c ****     {
 488              		.loc 2 77 8 view .LVU122
 489 0012 002B     		cmp	r3, #0
 490 0014 49DB     		blt	.L47
  83:Core/Inc/lcd_stm32f0.c ****     }
 491              		.loc 2 83 6 is_stmt 1 view .LVU123
  83:Core/Inc/lcd_stm32f0.c ****     }
 492              		.loc 2 83 11 is_stmt 0 view .LVU124
 493 0016 9022     		movs	r2, #144
 494 0018 D205     		lsls	r2, r2, #23
 495 001a 9169     		ldr	r1, [r2, #24]
  83:Core/Inc/lcd_stm32f0.c ****     }
 496              		.loc 2 83 18 view .LVU125
 497 001c 8023     		movs	r3, #128
 498 001e 1B06     		lsls	r3, r3, #24
 499 0020 0B43     		orrs	r3, r1
 500 0022 9361     		str	r3, [r2, #24]
 501              	.L32:
  86:Core/Inc/lcd_stm32f0.c ****     {
 502              		.loc 2 86 5 is_stmt 1 view .LVU126
  86:Core/Inc/lcd_stm32f0.c ****     {
 503              		.loc 2 86 8 is_stmt 0 view .LVU127
 504 0024 6306     		lsls	r3, r4, #25
 505 0026 48D5     		bpl	.L33
  88:Core/Inc/lcd_stm32f0.c ****     }
 506              		.loc 2 88 9 is_stmt 1 view .LVU128
  88:Core/Inc/lcd_stm32f0.c ****     }
 507              		.loc 2 88 14 is_stmt 0 view .LVU129
 508 0028 9022     		movs	r2, #144
 509 002a D205     		lsls	r2, r2, #23
 510 002c 9169     		ldr	r1, [r2, #24]
  88:Core/Inc/lcd_stm32f0.c ****     }
 511              		.loc 2 88 21 view .LVU130
 512 002e 8023     		movs	r3, #128
 513 0030 5B01     		lsls	r3, r3, #5
 514 0032 0B43     		orrs	r3, r1
 515 0034 9361     		str	r3, [r2, #24]
 516              	.L34:
  95:Core/Inc/lcd_stm32f0.c ****     {
 517              		.loc 2 95 5 is_stmt 1 view .LVU131
  95:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /tmp/cc64fjmy.s 			page 18


 518              		.loc 2 95 8 is_stmt 0 view .LVU132
 519 0036 A306     		lsls	r3, r4, #26
 520 0038 47D5     		bpl	.L35
  97:Core/Inc/lcd_stm32f0.c ****     }
 521              		.loc 2 97 6 is_stmt 1 view .LVU133
  97:Core/Inc/lcd_stm32f0.c ****     }
 522              		.loc 2 97 11 is_stmt 0 view .LVU134
 523 003a 3B4A     		ldr	r2, .L48+4
 524 003c 9169     		ldr	r1, [r2, #24]
  97:Core/Inc/lcd_stm32f0.c ****     }
 525              		.loc 2 97 18 view .LVU135
 526 003e 8023     		movs	r3, #128
 527 0040 9B00     		lsls	r3, r3, #2
 528 0042 0B43     		orrs	r3, r1
 529 0044 9361     		str	r3, [r2, #24]
 530              	.L36:
 104:Core/Inc/lcd_stm32f0.c ****     {
 531              		.loc 2 104 5 is_stmt 1 view .LVU136
 104:Core/Inc/lcd_stm32f0.c ****     {
 532              		.loc 2 104 8 is_stmt 0 view .LVU137
 533 0046 E306     		lsls	r3, r4, #27
 534 0048 46D5     		bpl	.L37
 106:Core/Inc/lcd_stm32f0.c ****     }
 535              		.loc 2 106 6 is_stmt 1 view .LVU138
 106:Core/Inc/lcd_stm32f0.c ****     }
 536              		.loc 2 106 11 is_stmt 0 view .LVU139
 537 004a 374A     		ldr	r2, .L48+4
 538 004c 9169     		ldr	r1, [r2, #24]
 106:Core/Inc/lcd_stm32f0.c ****     }
 539              		.loc 2 106 18 view .LVU140
 540 004e 8023     		movs	r3, #128
 541 0050 5B00     		lsls	r3, r3, #1
 542 0052 0B43     		orrs	r3, r1
 543 0054 9361     		str	r3, [r2, #24]
 544              	.L38:
 113:Core/Inc/lcd_stm32f0.c **** 
 545              		.loc 2 113 5 is_stmt 1 view .LVU141
 546 0056 FFF7FEFF 		bl	pulse_strobe
 547              	.LVL19:
 116:Core/Inc/lcd_stm32f0.c ****     {
 548              		.loc 2 116 5 view .LVU142
 116:Core/Inc/lcd_stm32f0.c ****     {
 549              		.loc 2 116 8 is_stmt 0 view .LVU143
 550 005a 2307     		lsls	r3, r4, #28
 551 005c 43D5     		bpl	.L39
 118:Core/Inc/lcd_stm32f0.c ****     }
 552              		.loc 2 118 6 is_stmt 1 view .LVU144
 118:Core/Inc/lcd_stm32f0.c ****     }
 553              		.loc 2 118 11 is_stmt 0 view .LVU145
 554 005e 9022     		movs	r2, #144
 555 0060 D205     		lsls	r2, r2, #23
 556 0062 9169     		ldr	r1, [r2, #24]
 118:Core/Inc/lcd_stm32f0.c ****     }
 557              		.loc 2 118 18 view .LVU146
 558 0064 8023     		movs	r3, #128
 559 0066 1B02     		lsls	r3, r3, #8
 560 0068 0B43     		orrs	r3, r1
ARM GAS  /tmp/cc64fjmy.s 			page 19


 561 006a 9361     		str	r3, [r2, #24]
 562              	.L40:
 125:Core/Inc/lcd_stm32f0.c ****     {
 563              		.loc 2 125 5 is_stmt 1 view .LVU147
 125:Core/Inc/lcd_stm32f0.c ****     {
 564              		.loc 2 125 8 is_stmt 0 view .LVU148
 565 006c 6307     		lsls	r3, r4, #29
 566 006e 42D5     		bpl	.L41
 127:Core/Inc/lcd_stm32f0.c ****     }
 567              		.loc 2 127 9 is_stmt 1 view .LVU149
 127:Core/Inc/lcd_stm32f0.c ****     }
 568              		.loc 2 127 14 is_stmt 0 view .LVU150
 569 0070 9022     		movs	r2, #144
 570 0072 D205     		lsls	r2, r2, #23
 571 0074 9169     		ldr	r1, [r2, #24]
 127:Core/Inc/lcd_stm32f0.c ****     }
 572              		.loc 2 127 21 view .LVU151
 573 0076 8023     		movs	r3, #128
 574 0078 5B01     		lsls	r3, r3, #5
 575 007a 0B43     		orrs	r3, r1
 576 007c 9361     		str	r3, [r2, #24]
 577              	.L42:
 134:Core/Inc/lcd_stm32f0.c ****     {
 578              		.loc 2 134 5 is_stmt 1 view .LVU152
 134:Core/Inc/lcd_stm32f0.c ****     {
 579              		.loc 2 134 8 is_stmt 0 view .LVU153
 580 007e A307     		lsls	r3, r4, #30
 581 0080 41D5     		bpl	.L43
 136:Core/Inc/lcd_stm32f0.c ****     }
 582              		.loc 2 136 6 is_stmt 1 view .LVU154
 136:Core/Inc/lcd_stm32f0.c ****     }
 583              		.loc 2 136 11 is_stmt 0 view .LVU155
 584 0082 294A     		ldr	r2, .L48+4
 585 0084 9169     		ldr	r1, [r2, #24]
 136:Core/Inc/lcd_stm32f0.c ****     }
 586              		.loc 2 136 18 view .LVU156
 587 0086 8023     		movs	r3, #128
 588 0088 9B00     		lsls	r3, r3, #2
 589 008a 0B43     		orrs	r3, r1
 590 008c 9361     		str	r3, [r2, #24]
 591              	.L44:
 143:Core/Inc/lcd_stm32f0.c ****     {
 592              		.loc 2 143 5 is_stmt 1 view .LVU157
 143:Core/Inc/lcd_stm32f0.c ****     {
 593              		.loc 2 143 8 is_stmt 0 view .LVU158
 594 008e E407     		lsls	r4, r4, #31
 595 0090 40D5     		bpl	.L45
 145:Core/Inc/lcd_stm32f0.c ****     }
 596              		.loc 2 145 6 is_stmt 1 view .LVU159
 145:Core/Inc/lcd_stm32f0.c ****     }
 597              		.loc 2 145 11 is_stmt 0 view .LVU160
 598 0092 254A     		ldr	r2, .L48+4
 599 0094 9169     		ldr	r1, [r2, #24]
 145:Core/Inc/lcd_stm32f0.c ****     }
 600              		.loc 2 145 18 view .LVU161
 601 0096 8023     		movs	r3, #128
 602 0098 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/cc64fjmy.s 			page 20


 603 009a 0B43     		orrs	r3, r1
 604 009c 9361     		str	r3, [r2, #24]
 605              	.L46:
 152:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 606              		.loc 2 152 5 is_stmt 1 view .LVU162
 607 009e FFF7FEFF 		bl	pulse_strobe
 608              	.LVL20:
 153:Core/Inc/lcd_stm32f0.c **** }
 609              		.loc 2 153 5 view .LVU163
 610 00a2 2248     		ldr	r0, .L48+8
 611 00a4 FFF7FEFF 		bl	delay
 612              	.LVL21:
 154:Core/Inc/lcd_stm32f0.c **** 
 613              		.loc 2 154 1 is_stmt 0 view .LVU164
 614              		@ sp needed
 615 00a8 10BD     		pop	{r4, pc}
 616              	.LVL22:
 617              	.L47:
  79:Core/Inc/lcd_stm32f0.c ****     }
 618              		.loc 2 79 6 is_stmt 1 view .LVU165
  79:Core/Inc/lcd_stm32f0.c ****     }
 619              		.loc 2 79 11 is_stmt 0 view .LVU166
 620 00aa 9022     		movs	r2, #144
 621 00ac D205     		lsls	r2, r2, #23
 622 00ae 9169     		ldr	r1, [r2, #24]
  79:Core/Inc/lcd_stm32f0.c ****     }
 623              		.loc 2 79 18 view .LVU167
 624 00b0 8023     		movs	r3, #128
 625 00b2 1B02     		lsls	r3, r3, #8
 626 00b4 0B43     		orrs	r3, r1
 627 00b6 9361     		str	r3, [r2, #24]
 628 00b8 B4E7     		b	.L32
 629              	.L33:
  92:Core/Inc/lcd_stm32f0.c ****     }
 630              		.loc 2 92 9 is_stmt 1 view .LVU168
  92:Core/Inc/lcd_stm32f0.c ****     }
 631              		.loc 2 92 14 is_stmt 0 view .LVU169
 632 00ba 9022     		movs	r2, #144
 633 00bc D205     		lsls	r2, r2, #23
 634 00be 9169     		ldr	r1, [r2, #24]
  92:Core/Inc/lcd_stm32f0.c ****     }
 635              		.loc 2 92 21 view .LVU170
 636 00c0 8023     		movs	r3, #128
 637 00c2 5B05     		lsls	r3, r3, #21
 638 00c4 0B43     		orrs	r3, r1
 639 00c6 9361     		str	r3, [r2, #24]
 640 00c8 B5E7     		b	.L34
 641              	.L35:
 101:Core/Inc/lcd_stm32f0.c ****     }
 642              		.loc 2 101 6 is_stmt 1 view .LVU171
 101:Core/Inc/lcd_stm32f0.c ****     }
 643              		.loc 2 101 11 is_stmt 0 view .LVU172
 644 00ca 174A     		ldr	r2, .L48+4
 645 00cc 9169     		ldr	r1, [r2, #24]
 101:Core/Inc/lcd_stm32f0.c ****     }
 646              		.loc 2 101 18 view .LVU173
 647 00ce 8023     		movs	r3, #128
ARM GAS  /tmp/cc64fjmy.s 			page 21


 648 00d0 9B04     		lsls	r3, r3, #18
 649 00d2 0B43     		orrs	r3, r1
 650 00d4 9361     		str	r3, [r2, #24]
 651 00d6 B6E7     		b	.L36
 652              	.L37:
 110:Core/Inc/lcd_stm32f0.c ****     }
 653              		.loc 2 110 6 is_stmt 1 view .LVU174
 110:Core/Inc/lcd_stm32f0.c ****     }
 654              		.loc 2 110 11 is_stmt 0 view .LVU175
 655 00d8 134A     		ldr	r2, .L48+4
 656 00da 9169     		ldr	r1, [r2, #24]
 110:Core/Inc/lcd_stm32f0.c ****     }
 657              		.loc 2 110 18 view .LVU176
 658 00dc 8023     		movs	r3, #128
 659 00de 5B04     		lsls	r3, r3, #17
 660 00e0 0B43     		orrs	r3, r1
 661 00e2 9361     		str	r3, [r2, #24]
 662 00e4 B7E7     		b	.L38
 663              	.LVL23:
 664              	.L39:
 122:Core/Inc/lcd_stm32f0.c ****     }
 665              		.loc 2 122 6 is_stmt 1 view .LVU177
 122:Core/Inc/lcd_stm32f0.c ****     }
 666              		.loc 2 122 11 is_stmt 0 view .LVU178
 667 00e6 9022     		movs	r2, #144
 668 00e8 D205     		lsls	r2, r2, #23
 669 00ea 9169     		ldr	r1, [r2, #24]
 122:Core/Inc/lcd_stm32f0.c ****     }
 670              		.loc 2 122 18 view .LVU179
 671 00ec 8023     		movs	r3, #128
 672 00ee 1B06     		lsls	r3, r3, #24
 673 00f0 0B43     		orrs	r3, r1
 674 00f2 9361     		str	r3, [r2, #24]
 675 00f4 BAE7     		b	.L40
 676              	.L41:
 131:Core/Inc/lcd_stm32f0.c ****     }
 677              		.loc 2 131 9 is_stmt 1 view .LVU180
 131:Core/Inc/lcd_stm32f0.c ****     }
 678              		.loc 2 131 14 is_stmt 0 view .LVU181
 679 00f6 9022     		movs	r2, #144
 680 00f8 D205     		lsls	r2, r2, #23
 681 00fa 9169     		ldr	r1, [r2, #24]
 131:Core/Inc/lcd_stm32f0.c ****     }
 682              		.loc 2 131 21 view .LVU182
 683 00fc 8023     		movs	r3, #128
 684 00fe 5B05     		lsls	r3, r3, #21
 685 0100 0B43     		orrs	r3, r1
 686 0102 9361     		str	r3, [r2, #24]
 687 0104 BBE7     		b	.L42
 688              	.L43:
 140:Core/Inc/lcd_stm32f0.c ****     }
 689              		.loc 2 140 6 is_stmt 1 view .LVU183
 140:Core/Inc/lcd_stm32f0.c ****     }
 690              		.loc 2 140 11 is_stmt 0 view .LVU184
 691 0106 084A     		ldr	r2, .L48+4
 692 0108 9169     		ldr	r1, [r2, #24]
 140:Core/Inc/lcd_stm32f0.c ****     }
ARM GAS  /tmp/cc64fjmy.s 			page 22


 693              		.loc 2 140 18 view .LVU185
 694 010a 8023     		movs	r3, #128
 695 010c 9B04     		lsls	r3, r3, #18
 696 010e 0B43     		orrs	r3, r1
 697 0110 9361     		str	r3, [r2, #24]
 698 0112 BCE7     		b	.L44
 699              	.L45:
 149:Core/Inc/lcd_stm32f0.c ****     }
 700              		.loc 2 149 6 is_stmt 1 view .LVU186
 149:Core/Inc/lcd_stm32f0.c ****     }
 701              		.loc 2 149 11 is_stmt 0 view .LVU187
 702 0114 044A     		ldr	r2, .L48+4
 703 0116 9169     		ldr	r1, [r2, #24]
 149:Core/Inc/lcd_stm32f0.c ****     }
 704              		.loc 2 149 18 view .LVU188
 705 0118 8023     		movs	r3, #128
 706 011a 5B04     		lsls	r3, r3, #17
 707 011c 0B43     		orrs	r3, r1
 708 011e 9361     		str	r3, [r2, #24]
 709 0120 BDE7     		b	.L46
 710              	.L49:
 711 0122 C046     		.align	2
 712              	.L48:
 713 0124 00080048 		.word	1207961600
 714 0128 00040048 		.word	1207960576
 715 012c B80B0000 		.word	3000
 716              		.cfi_endproc
 717              	.LFE40:
 719              		.section	.text.init_LCD,"ax",%progbits
 720              		.align	1
 721              		.global	init_LCD
 722              		.syntax unified
 723              		.code	16
 724              		.thumb_func
 726              	init_LCD:
 727              	.LFB41:
 168:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 728              		.loc 2 168 1 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732 0000 10B5     		push	{r4, lr}
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 4, -8
 735              		.cfi_offset 14, -4
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 736              		.loc 2 169 5 view .LVU190
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 737              		.loc 2 169 8 is_stmt 0 view .LVU191
 738 0002 1B4B     		ldr	r3, .L51
 739 0004 5969     		ldr	r1, [r3, #20]
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 740              		.loc 2 169 17 view .LVU192
 741 0006 8022     		movs	r2, #128
 742 0008 9202     		lsls	r2, r2, #10
 743 000a 0A43     		orrs	r2, r1
 744 000c 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/cc64fjmy.s 			page 23


 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 745              		.loc 2 170 5 is_stmt 1 view .LVU193
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 746              		.loc 2 170 8 is_stmt 0 view .LVU194
 747 000e 5969     		ldr	r1, [r3, #20]
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 748              		.loc 2 170 17 view .LVU195
 749 0010 8022     		movs	r2, #128
 750 0012 D202     		lsls	r2, r2, #11
 751 0014 0A43     		orrs	r2, r1
 752 0016 5A61     		str	r2, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 753              		.loc 2 171 5 is_stmt 1 view .LVU196
 171:Core/Inc/lcd_stm32f0.c **** 
 754              		.loc 2 171 8 is_stmt 0 view .LVU197
 755 0018 5969     		ldr	r1, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 756              		.loc 2 171 17 view .LVU198
 757 001a 8022     		movs	r2, #128
 758 001c 1203     		lsls	r2, r2, #12
 759 001e 0A43     		orrs	r2, r1
 760 0020 5A61     		str	r2, [r3, #20]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 761              		.loc 2 173 5 is_stmt 1 view .LVU199
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 762              		.loc 2 173 10 is_stmt 0 view .LVU200
 763 0022 9022     		movs	r2, #144
 764 0024 D205     		lsls	r2, r2, #23
 765 0026 1168     		ldr	r1, [r2]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 766              		.loc 2 173 18 view .LVU201
 767 0028 8223     		movs	r3, #130
 768 002a DB05     		lsls	r3, r3, #23
 769 002c 0B43     		orrs	r3, r1
 770 002e 1360     		str	r3, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 771              		.loc 2 174 5 is_stmt 1 view .LVU202
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 772              		.loc 2 174 10 is_stmt 0 view .LVU203
 773 0030 104A     		ldr	r2, .L51+4
 774 0032 1168     		ldr	r1, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 775              		.loc 2 174 18 view .LVU204
 776 0034 A023     		movs	r3, #160
 777 0036 DB02     		lsls	r3, r3, #11
 778 0038 0B43     		orrs	r3, r1
 779 003a 1360     		str	r3, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 780              		.loc 2 175 5 is_stmt 1 view .LVU205
 175:Core/Inc/lcd_stm32f0.c **** 
 781              		.loc 2 175 10 is_stmt 0 view .LVU206
 782 003c 0E4A     		ldr	r2, .L51+8
 783 003e 1168     		ldr	r1, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 784              		.loc 2 175 18 view .LVU207
 785 0040 A023     		movs	r3, #160
 786 0042 DB05     		lsls	r3, r3, #23
ARM GAS  /tmp/cc64fjmy.s 			page 24


 787 0044 0B43     		orrs	r3, r1
 788 0046 1360     		str	r3, [r2]
 177:Core/Inc/lcd_stm32f0.c **** 
 789              		.loc 2 177 5 is_stmt 1 view .LVU208
 790 0048 0C48     		ldr	r0, .L51+12
 791 004a FFF7FEFF 		bl	delay
 792              	.LVL24:
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 793              		.loc 2 179 5 view .LVU209
 794 004e 3320     		movs	r0, #51
 795 0050 FFF7FEFF 		bl	lcd_command
 796              	.LVL25:
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 797              		.loc 2 180 5 view .LVU210
 798 0054 3220     		movs	r0, #50
 799 0056 FFF7FEFF 		bl	lcd_command
 800              	.LVL26:
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 801              		.loc 2 181 5 view .LVU211
 802 005a 0C20     		movs	r0, #12
 803 005c FFF7FEFF 		bl	lcd_command
 804              	.LVL27:
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 805              		.loc 2 182 5 view .LVU212
 806 0060 2820     		movs	r0, #40
 807 0062 FFF7FEFF 		bl	lcd_command
 808              	.LVL28:
 183:Core/Inc/lcd_stm32f0.c **** }
 809              		.loc 2 183 5 view .LVU213
 810 0066 0120     		movs	r0, #1
 811 0068 FFF7FEFF 		bl	lcd_command
 812              	.LVL29:
 184:Core/Inc/lcd_stm32f0.c **** 
 813              		.loc 2 184 1 is_stmt 0 view .LVU214
 814              		@ sp needed
 815 006c 10BD     		pop	{r4, pc}
 816              	.L52:
 817 006e C046     		.align	2
 818              	.L51:
 819 0070 00100240 		.word	1073876992
 820 0074 00040048 		.word	1207960576
 821 0078 00080048 		.word	1207961600
 822 007c 30750000 		.word	30000
 823              		.cfi_endproc
 824              	.LFE41:
 826              		.section	.text.initGPIO,"ax",%progbits
 827              		.align	1
 828              		.global	initGPIO
 829              		.syntax unified
 830              		.code	16
 831              		.thumb_func
 833              	initGPIO:
 834              	.LFB47:
   1:Core/Src/Assignment-THWTAM001.c **** /**
   2:Core/Src/Assignment-THWTAM001.c **** ********************************************************************                        
   3:Core/Src/Assignment-THWTAM001.c **** ====================================================================
   4:Core/Src/Assignment-THWTAM001.c **** * Written by: Tamsanqa Thwala
ARM GAS  /tmp/cc64fjmy.s 			page 25


   5:Core/Src/Assignment-THWTAM001.c **** * Stundet Number: THWTAM001                 		               
   6:Core/Src/Assignment-THWTAM001.c **** * Version: 11/05/2023                                         
   7:Core/Src/Assignment-THWTAM001.c **** * Modified:                                                       
   8:Core/Src/Assignment-THWTAM001.c **** ====================================================================            
   9:Core/Src/Assignment-THWTAM001.c **** Target:        STM32F0                                           
  10:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  11:Core/Src/Assignment-THWTAM001.c **** Description                                                                    
  12:Core/Src/Assignment-THWTAM001.c **** ********************************************************************
  13:Core/Src/Assignment-THWTAM001.c **** 
  14:Core/Src/Assignment-THWTAM001.c **** Include files
  15:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  16:Core/Src/Assignment-THWTAM001.c **** */
  17:Core/Src/Assignment-THWTAM001.c **** 
  18:Core/Src/Assignment-THWTAM001.c **** #include <stdint.h>
  19:Core/Src/Assignment-THWTAM001.c **** #include "stm32f0xx.h"
  20:Core/Src/Assignment-THWTAM001.c **** #include <lcd_stm32f0.c>
  21:Core/Src/Assignment-THWTAM001.c **** 
  22:Core/Src/Assignment-THWTAM001.c **** /**
  23:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  24:Core/Src/Assignment-THWTAM001.c **** Global constants
  25:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  26:Core/Src/Assignment-THWTAM001.c **** */
  27:Core/Src/Assignment-THWTAM001.c **** 
  28:Core/Src/Assignment-THWTAM001.c **** #define TRUE 1
  29:Core/Src/Assignment-THWTAM001.c **** #define FALSE 0
  30:Core/Src/Assignment-THWTAM001.c **** 
  31:Core/Src/Assignment-THWTAM001.c **** //redefine uint8_t to flag_t
  32:Core/Src/Assignment-THWTAM001.c **** typedef uint8_t flag_t;  
  33:Core/Src/Assignment-THWTAM001.c **** 
  34:Core/Src/Assignment-THWTAM001.c **** /**
  35:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  36:Core/Src/Assignment-THWTAM001.c **** Global variables
  37:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  38:Core/Src/Assignment-THWTAM001.c **** */
  39:Core/Src/Assignment-THWTAM001.c **** 
  40:Core/Src/Assignment-THWTAM001.c **** flag_t startFlag = FALSE;
  41:Core/Src/Assignment-THWTAM001.c **** flag_t lapFlag = FALSE;
  42:Core/Src/Assignment-THWTAM001.c **** flag_t stopFlag = FALSE;
  43:Core/Src/Assignment-THWTAM001.c **** flag_t resetFlag = TRUE;
  44:Core/Src/Assignment-THWTAM001.c **** flag_t updateLapFlag = FALSE;
  45:Core/Src/Assignment-THWTAM001.c **** 
  46:Core/Src/Assignment-THWTAM001.c **** uint8_t minutes = 0;
  47:Core/Src/Assignment-THWTAM001.c **** uint8_t seconds = 0;
  48:Core/Src/Assignment-THWTAM001.c **** uint8_t hundredths = 0;
  49:Core/Src/Assignment-THWTAM001.c **** 
  50:Core/Src/Assignment-THWTAM001.c **** char mins[2] = {0x30,0x30};
  51:Core/Src/Assignment-THWTAM001.c **** char secs[2] = {0x30,0x30};
  52:Core/Src/Assignment-THWTAM001.c **** char hunds[2] = {0x30,0x30};
  53:Core/Src/Assignment-THWTAM001.c **** 
  54:Core/Src/Assignment-THWTAM001.c **** int counter = 0;
  55:Core/Src/Assignment-THWTAM001.c **** char time[8];
  56:Core/Src/Assignment-THWTAM001.c **** 
  57:Core/Src/Assignment-THWTAM001.c **** 
  58:Core/Src/Assignment-THWTAM001.c **** // flags for checking if stopwatch reached a point in time
  59:Core/Src/Assignment-THWTAM001.c **** uint8_t pastTenSecs = FALSE;
  60:Core/Src/Assignment-THWTAM001.c **** uint8_t pastTenMinutes = FALSE;
  61:Core/Src/Assignment-THWTAM001.c **** 
ARM GAS  /tmp/cc64fjmy.s 			page 26


  62:Core/Src/Assignment-THWTAM001.c **** 
  63:Core/Src/Assignment-THWTAM001.c **** /**
  64:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  65:Core/Src/Assignment-THWTAM001.c **** Function declarations
  66:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  67:Core/Src/Assignment-THWTAM001.c **** */
  68:Core/Src/Assignment-THWTAM001.c **** void initGPIO(void);
  69:Core/Src/Assignment-THWTAM001.c **** void initTIM14(void);
  70:Core/Src/Assignment-THWTAM001.c **** void checkPB(void);
  71:Core/Src/Assignment-THWTAM001.c **** void display(void);
  72:Core/Src/Assignment-THWTAM001.c **** void TIM14_IRQHandler(void);
  73:Core/Src/Assignment-THWTAM001.c **** void convert2BCDASCII(const uint8_t min, const uint8_t sec, const uint8_t hund, char* resultPtr);
  74:Core/Src/Assignment-THWTAM001.c **** void BDCHelper(uint8_t n, char * result);
  75:Core/Src/Assignment-THWTAM001.c **** 
  76:Core/Src/Assignment-THWTAM001.c **** /**
  77:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  78:Core/Src/Assignment-THWTAM001.c ****  Main function
  79:Core/Src/Assignment-THWTAM001.c **** ====================================================================
  80:Core/Src/Assignment-THWTAM001.c **** */
  81:Core/Src/Assignment-THWTAM001.c **** int main (void)
  82:Core/Src/Assignment-THWTAM001.c **** {
  83:Core/Src/Assignment-THWTAM001.c ****     initGPIO(); // initialise GPIO pins
  84:Core/Src/Assignment-THWTAM001.c ****     init_LCD(); // initialise lcd
  85:Core/Src/Assignment-THWTAM001.c ****     initTIM14();
  86:Core/Src/Assignment-THWTAM001.c **** 
  87:Core/Src/Assignment-THWTAM001.c **** 
  88:Core/Src/Assignment-THWTAM001.c ****     for(;;){
  89:Core/Src/Assignment-THWTAM001.c ****         checkPB();
  90:Core/Src/Assignment-THWTAM001.c ****         display(); // turn leds based on flags
  91:Core/Src/Assignment-THWTAM001.c ****         for( volatile int i = 0; i < 10000; i++);
  92:Core/Src/Assignment-THWTAM001.c ****         updateLapFlag = FALSE; // set updateFlag to false
  93:Core/Src/Assignment-THWTAM001.c ****         
  94:Core/Src/Assignment-THWTAM001.c ****     }
  95:Core/Src/Assignment-THWTAM001.c **** 
  96:Core/Src/Assignment-THWTAM001.c **** } // End of main
  97:Core/Src/Assignment-THWTAM001.c **** 
  98:Core/Src/Assignment-THWTAM001.c **** /**
  99:Core/Src/Assignment-THWTAM001.c **** ==================================================================== 
 100:Core/Src/Assignment-THWTAM001.c **** Function definitions
 101:Core/Src/Assignment-THWTAM001.c **** ====================================================================
 102:Core/Src/Assignment-THWTAM001.c **** */
 103:Core/Src/Assignment-THWTAM001.c **** 
 104:Core/Src/Assignment-THWTAM001.c **** void initGPIO(void){
 835              		.loc 1 104 20 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 105:Core/Src/Assignment-THWTAM001.c ****     // initailise  GPIO B
 106:Core/Src/Assignment-THWTAM001.c ****     RCC->AHBENR |= 1<<18;
 840              		.loc 1 106 5 view .LVU216
 841              		.loc 1 106 8 is_stmt 0 view .LVU217
 842 0000 1A4B     		ldr	r3, .L54
 843 0002 5969     		ldr	r1, [r3, #20]
 844              		.loc 1 106 17 view .LVU218
 845 0004 8022     		movs	r2, #128
 846 0006 D202     		lsls	r2, r2, #11
ARM GAS  /tmp/cc64fjmy.s 			page 27


 847 0008 0A43     		orrs	r2, r1
 848 000a 5A61     		str	r2, [r3, #20]
 107:Core/Src/Assignment-THWTAM001.c ****     //configure pin 0-7, 10, and 11 to output mode
 108:Core/Src/Assignment-THWTAM001.c ****     GPIOB->MODER|= 0x00505555; 
 849              		.loc 1 108 5 is_stmt 1 view .LVU219
 850              		.loc 1 108 10 is_stmt 0 view .LVU220
 851 000c 184A     		ldr	r2, .L54+4
 852 000e 1068     		ldr	r0, [r2]
 853              		.loc 1 108 17 view .LVU221
 854 0010 1849     		ldr	r1, .L54+8
 855 0012 0143     		orrs	r1, r0
 856 0014 1160     		str	r1, [r2]
 109:Core/Src/Assignment-THWTAM001.c ****     GPIOB-> ODR = 0x00000000; // turn the 8 leds off 
 857              		.loc 1 109 5 is_stmt 1 view .LVU222
 858              		.loc 1 109 17 is_stmt 0 view .LVU223
 859 0016 0021     		movs	r1, #0
 860 0018 5161     		str	r1, [r2, #20]
 110:Core/Src/Assignment-THWTAM001.c **** 
 111:Core/Src/Assignment-THWTAM001.c ****     //initialise GPIO A
 112:Core/Src/Assignment-THWTAM001.c ****     RCC->AHBENR |= 1<<17; 
 861              		.loc 1 112 5 is_stmt 1 view .LVU224
 862              		.loc 1 112 8 is_stmt 0 view .LVU225
 863 001a 5969     		ldr	r1, [r3, #20]
 864              		.loc 1 112 17 view .LVU226
 865 001c 8022     		movs	r2, #128
 866 001e 9202     		lsls	r2, r2, #10
 867 0020 0A43     		orrs	r2, r1
 868 0022 5A61     		str	r2, [r3, #20]
 113:Core/Src/Assignment-THWTAM001.c ****     //configure pins 0 - 3 to input mode   
 114:Core/Src/Assignment-THWTAM001.c ****     GPIOA->MODER &= ~GPIO_MODER_MODER0;
 869              		.loc 1 114 5 is_stmt 1 view .LVU227
 870              		.loc 1 114 10 is_stmt 0 view .LVU228
 871 0024 9023     		movs	r3, #144
 872 0026 DB05     		lsls	r3, r3, #23
 873 0028 1A68     		ldr	r2, [r3]
 874              		.loc 1 114 18 view .LVU229
 875 002a 0321     		movs	r1, #3
 876 002c 8A43     		bics	r2, r1
 877 002e 1A60     		str	r2, [r3]
 115:Core/Src/Assignment-THWTAM001.c ****     GPIOA->MODER &= ~GPIO_MODER_MODER1;
 878              		.loc 1 115 5 is_stmt 1 view .LVU230
 879              		.loc 1 115 10 is_stmt 0 view .LVU231
 880 0030 1A68     		ldr	r2, [r3]
 881              		.loc 1 115 18 view .LVU232
 882 0032 0931     		adds	r1, r1, #9
 883 0034 8A43     		bics	r2, r1
 884 0036 1A60     		str	r2, [r3]
 116:Core/Src/Assignment-THWTAM001.c ****     GPIOA->MODER &= ~GPIO_MODER_MODER2;
 885              		.loc 1 116 5 is_stmt 1 view .LVU233
 886              		.loc 1 116 10 is_stmt 0 view .LVU234
 887 0038 1A68     		ldr	r2, [r3]
 888              		.loc 1 116 18 view .LVU235
 889 003a 2431     		adds	r1, r1, #36
 890 003c 8A43     		bics	r2, r1
 891 003e 1A60     		str	r2, [r3]
 117:Core/Src/Assignment-THWTAM001.c ****     GPIOA->MODER &= ~ GPIO_MODER_MODER3; 
 892              		.loc 1 117 5 is_stmt 1 view .LVU236
ARM GAS  /tmp/cc64fjmy.s 			page 28


 893              		.loc 1 117 10 is_stmt 0 view .LVU237
 894 0040 1A68     		ldr	r2, [r3]
 895              		.loc 1 117 18 view .LVU238
 896 0042 9031     		adds	r1, r1, #144
 897 0044 8A43     		bics	r2, r1
 898 0046 1A60     		str	r2, [r3]
 118:Core/Src/Assignment-THWTAM001.c **** 
 119:Core/Src/Assignment-THWTAM001.c ****     /** enable pull-up resitors for port A pin 0 - 3
 120:Core/Src/Assignment-THWTAM001.c ****     * by setting relevant bits in register to 1
 121:Core/Src/Assignment-THWTAM001.c ****     */
 122:Core/Src/Assignment-THWTAM001.c ****     GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR0_0;
 899              		.loc 1 122 5 is_stmt 1 view .LVU239
 900              		.loc 1 122 11 is_stmt 0 view .LVU240
 901 0048 DA68     		ldr	r2, [r3, #12]
 902              		.loc 1 122 20 view .LVU241
 903 004a BF39     		subs	r1, r1, #191
 904 004c 0A43     		orrs	r2, r1
 905 004e DA60     		str	r2, [r3, #12]
 123:Core/Src/Assignment-THWTAM001.c ****     GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR1_0;
 906              		.loc 1 123 5 is_stmt 1 view .LVU242
 907              		.loc 1 123 11 is_stmt 0 view .LVU243
 908 0050 DA68     		ldr	r2, [r3, #12]
 909              		.loc 1 123 20 view .LVU244
 910 0052 0331     		adds	r1, r1, #3
 911 0054 0A43     		orrs	r2, r1
 912 0056 DA60     		str	r2, [r3, #12]
 124:Core/Src/Assignment-THWTAM001.c ****     GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR2_0;
 913              		.loc 1 124 5 is_stmt 1 view .LVU245
 914              		.loc 1 124 11 is_stmt 0 view .LVU246
 915 0058 DA68     		ldr	r2, [r3, #12]
 916              		.loc 1 124 20 view .LVU247
 917 005a 0C31     		adds	r1, r1, #12
 918 005c 0A43     		orrs	r2, r1
 919 005e DA60     		str	r2, [r3, #12]
 125:Core/Src/Assignment-THWTAM001.c ****     GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR3_0;
 920              		.loc 1 125 5 is_stmt 1 view .LVU248
 921              		.loc 1 125 11 is_stmt 0 view .LVU249
 922 0060 DA68     		ldr	r2, [r3, #12]
 923              		.loc 1 125 20 view .LVU250
 924 0062 3031     		adds	r1, r1, #48
 925 0064 0A43     		orrs	r2, r1
 926 0066 DA60     		str	r2, [r3, #12]
 126:Core/Src/Assignment-THWTAM001.c **** 
 127:Core/Src/Assignment-THWTAM001.c ****  }
 927              		.loc 1 127 2 view .LVU251
 928              		@ sp needed
 929 0068 7047     		bx	lr
 930              	.L55:
 931 006a C046     		.align	2
 932              	.L54:
 933 006c 00100240 		.word	1073876992
 934 0070 00040048 		.word	1207960576
 935 0074 55555000 		.word	5264725
 936              		.cfi_endproc
 937              	.LFE47:
 939              		.section	.text.initTIM14,"ax",%progbits
 940              		.align	1
ARM GAS  /tmp/cc64fjmy.s 			page 29


 941              		.global	initTIM14
 942              		.syntax unified
 943              		.code	16
 944              		.thumb_func
 946              	initTIM14:
 947              	.LFB48:
 128:Core/Src/Assignment-THWTAM001.c **** 
 129:Core/Src/Assignment-THWTAM001.c **** 
 130:Core/Src/Assignment-THWTAM001.c **** void initTIM14(void){
 948              		.loc 1 130 21 is_stmt 1 view -0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 131:Core/Src/Assignment-THWTAM001.c ****     //initialise timer 14
 132:Core/Src/Assignment-THWTAM001.c ****     RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN; // Enable clock to timer 14 on bit 8
 953              		.loc 1 132 5 view .LVU253
 954              		.loc 1 132 9 is_stmt 0 view .LVU254
 955 0000 094A     		ldr	r2, .L57
 956 0002 D169     		ldr	r1, [r2, #28]
 957              		.loc 1 132 20 view .LVU255
 958 0004 8023     		movs	r3, #128
 959 0006 5B00     		lsls	r3, r3, #1
 960 0008 0B43     		orrs	r3, r1
 961 000a D361     		str	r3, [r2, #28]
 133:Core/Src/Assignment-THWTAM001.c ****     TIM14 -> PSC = 4; // set prescaler multipler to 4
 962              		.loc 1 133 5 is_stmt 1 view .LVU256
 963              		.loc 1 133 18 is_stmt 0 view .LVU257
 964 000c 074B     		ldr	r3, .L57+4
 965 000e 0422     		movs	r2, #4
 966 0010 9A62     		str	r2, [r3, #40]
 134:Core/Src/Assignment-THWTAM001.c ****     TIM14 -> ARR = 14000;
 967              		.loc 1 134 5 is_stmt 1 view .LVU258
 968              		.loc 1 134 18 is_stmt 0 view .LVU259
 969 0012 074A     		ldr	r2, .L57+8
 970 0014 DA62     		str	r2, [r3, #44]
 135:Core/Src/Assignment-THWTAM001.c ****     TIM14 -> DIER |= TIM_DIER_UIE; // enable interrupts for timer 14 in bit 0/ update interrupt ena
 971              		.loc 1 135 5 is_stmt 1 view .LVU260
 972              		.loc 1 135 11 is_stmt 0 view .LVU261
 973 0016 DA68     		ldr	r2, [r3, #12]
 974              		.loc 1 135 19 view .LVU262
 975 0018 0121     		movs	r1, #1
 976 001a 0A43     		orrs	r2, r1
 977 001c DA60     		str	r2, [r3, #12]
 136:Core/Src/Assignment-THWTAM001.c **** 
 137:Core/Src/Assignment-THWTAM001.c ****     
 138:Core/Src/Assignment-THWTAM001.c ****     NVIC_EnableIRQ(19); // enable interrupt to run
 978              		.loc 1 138 5 is_stmt 1 view .LVU263
 979              	.LVL30:
 980              	.LBB4:
 981              	.LBI4:
 982              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
ARM GAS  /tmp/cc64fjmy.s 			page 30


   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc64fjmy.s 			page 31


  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /tmp/cc64fjmy.s 			page 32


 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
ARM GAS  /tmp/cc64fjmy.s 			page 33


 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
ARM GAS  /tmp/cc64fjmy.s 			page 34


 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
ARM GAS  /tmp/cc64fjmy.s 			page 35


 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
ARM GAS  /tmp/cc64fjmy.s 			page 36


 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc64fjmy.s 			page 37


 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
ARM GAS  /tmp/cc64fjmy.s 			page 38


 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
ARM GAS  /tmp/cc64fjmy.s 			page 39


 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
ARM GAS  /tmp/cc64fjmy.s 			page 40


 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 983              		.loc 3 623 22 view .LVU264
 984              	.LBB5:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 985              		.loc 3 625 3 view .LVU265
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 986              		.loc 3 627 5 view .LVU266
 987              		.loc 3 627 20 is_stmt 0 view .LVU267
ARM GAS  /tmp/cc64fjmy.s 			page 41


 988 001e 054B     		ldr	r3, .L57+12
 989 0020 8022     		movs	r2, #128
 990 0022 1203     		lsls	r2, r2, #12
 991 0024 1A60     		str	r2, [r3]
 992              	.LVL31:
 993              		.loc 3 627 20 view .LVU268
 994              	.LBE5:
 995              	.LBE4:
 139:Core/Src/Assignment-THWTAM001.c **** }
 996              		.loc 1 139 1 view .LVU269
 997              		@ sp needed
 998 0026 7047     		bx	lr
 999              	.L58:
 1000              		.align	2
 1001              	.L57:
 1002 0028 00100240 		.word	1073876992
 1003 002c 00200040 		.word	1073750016
 1004 0030 B0360000 		.word	14000
 1005 0034 00E100E0 		.word	-536813312
 1006              		.cfi_endproc
 1007              	.LFE48:
 1009              		.section	.text.TIM14_IRQHandler,"ax",%progbits
 1010              		.align	1
 1011              		.global	TIM14_IRQHandler
 1012              		.syntax unified
 1013              		.code	16
 1014              		.thumb_func
 1016              	TIM14_IRQHandler:
 1017              	.LFB49:
 140:Core/Src/Assignment-THWTAM001.c **** 
 141:Core/Src/Assignment-THWTAM001.c **** void TIM14_IRQHandler(void){
 1018              		.loc 1 141 28 is_stmt 1 view -0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 0
 1021              		@ frame_needed = 0, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 142:Core/Src/Assignment-THWTAM001.c ****     
 143:Core/Src/Assignment-THWTAM001.c ****     // implement interrupt handler
 144:Core/Src/Assignment-THWTAM001.c ****     hundredths += 1;
 1023              		.loc 1 144 5 view .LVU271
 1024              		.loc 1 144 16 is_stmt 0 view .LVU272
 1025 0000 164A     		ldr	r2, .L64
 1026 0002 1378     		ldrb	r3, [r2]
 1027 0004 0133     		adds	r3, r3, #1
 1028 0006 DBB2     		uxtb	r3, r3
 1029 0008 1370     		strb	r3, [r2]
 145:Core/Src/Assignment-THWTAM001.c ****     if(hundredths == 100){
 1030              		.loc 1 145 5 is_stmt 1 view .LVU273
 1031              		.loc 1 145 7 is_stmt 0 view .LVU274
 1032 000a 642B     		cmp	r3, #100
 1033 000c 16D0     		beq	.L62
 1034              	.L60:
 146:Core/Src/Assignment-THWTAM001.c ****         seconds += 1;
 147:Core/Src/Assignment-THWTAM001.c ****         hundredths = 0; 
 148:Core/Src/Assignment-THWTAM001.c ****     }
 149:Core/Src/Assignment-THWTAM001.c ****      // set flag to true if seconds greater than ten
 150:Core/Src/Assignment-THWTAM001.c ****     pastTenSecs = seconds >= 10 ? TRUE: FALSE;
ARM GAS  /tmp/cc64fjmy.s 			page 42


 1035              		.loc 1 150 5 is_stmt 1 view .LVU275
 1036              		.loc 1 150 39 is_stmt 0 view .LVU276
 1037 000e 144B     		ldr	r3, .L64+4
 1038 0010 1978     		ldrb	r1, [r3]
 1039 0012 0923     		movs	r3, #9
 1040 0014 8B42     		cmp	r3, r1
 1041 0016 9241     		sbcs	r2, r2, r2
 1042 0018 5242     		rsbs	r2, r2, #0
 1043              		.loc 1 150 17 view .LVU277
 1044 001a 1248     		ldr	r0, .L64+8
 1045 001c 0270     		strb	r2, [r0]
 151:Core/Src/Assignment-THWTAM001.c ****     // set flag to true if minutes greater than ten
 152:Core/Src/Assignment-THWTAM001.c ****     pastTenMinutes = minutes >= 10 ? TRUE: FALSE;
 1046              		.loc 1 152 5 is_stmt 1 view .LVU278
 1047              		.loc 1 152 42 is_stmt 0 view .LVU279
 1048 001e 124A     		ldr	r2, .L64+12
 1049 0020 1278     		ldrb	r2, [r2]
 1050 0022 9342     		cmp	r3, r2
 1051 0024 9B41     		sbcs	r3, r3, r3
 1052 0026 5B42     		rsbs	r3, r3, #0
 1053              		.loc 1 152 20 view .LVU280
 1054 0028 1048     		ldr	r0, .L64+16
 1055 002a 0370     		strb	r3, [r0]
 153:Core/Src/Assignment-THWTAM001.c **** 
 154:Core/Src/Assignment-THWTAM001.c ****     if(seconds == 60){
 1056              		.loc 1 154 5 is_stmt 1 view .LVU281
 1057              		.loc 1 154 7 is_stmt 0 view .LVU282
 1058 002c 3C29     		cmp	r1, #60
 1059 002e 0DD0     		beq	.L63
 1060              	.L61:
 155:Core/Src/Assignment-THWTAM001.c ****         minutes += 1;
 156:Core/Src/Assignment-THWTAM001.c ****         seconds = 0;
 157:Core/Src/Assignment-THWTAM001.c ****     }
 158:Core/Src/Assignment-THWTAM001.c **** 
 159:Core/Src/Assignment-THWTAM001.c ****     TIM14 -> SR &= ~TIM_SR_UIF; // clear interrupt status register
 1061              		.loc 1 159 5 is_stmt 1 view .LVU283
 1062              		.loc 1 159 11 is_stmt 0 view .LVU284
 1063 0030 0F4A     		ldr	r2, .L64+20
 1064 0032 1369     		ldr	r3, [r2, #16]
 1065              		.loc 1 159 17 view .LVU285
 1066 0034 0121     		movs	r1, #1
 1067 0036 8B43     		bics	r3, r1
 1068 0038 1361     		str	r3, [r2, #16]
 160:Core/Src/Assignment-THWTAM001.c **** }
 1069              		.loc 1 160 1 view .LVU286
 1070              		@ sp needed
 1071 003a 7047     		bx	lr
 1072              	.L62:
 146:Core/Src/Assignment-THWTAM001.c ****         hundredths = 0; 
 1073              		.loc 1 146 9 is_stmt 1 view .LVU287
 146:Core/Src/Assignment-THWTAM001.c ****         hundredths = 0; 
 1074              		.loc 1 146 17 is_stmt 0 view .LVU288
 1075 003c 084A     		ldr	r2, .L64+4
 1076 003e 1378     		ldrb	r3, [r2]
 1077 0040 0133     		adds	r3, r3, #1
 1078 0042 1370     		strb	r3, [r2]
 147:Core/Src/Assignment-THWTAM001.c ****     }
ARM GAS  /tmp/cc64fjmy.s 			page 43


 1079              		.loc 1 147 9 is_stmt 1 view .LVU289
 147:Core/Src/Assignment-THWTAM001.c ****     }
 1080              		.loc 1 147 20 is_stmt 0 view .LVU290
 1081 0044 054B     		ldr	r3, .L64
 1082 0046 0022     		movs	r2, #0
 1083 0048 1A70     		strb	r2, [r3]
 1084 004a E0E7     		b	.L60
 1085              	.L63:
 155:Core/Src/Assignment-THWTAM001.c ****         seconds = 0;
 1086              		.loc 1 155 9 is_stmt 1 view .LVU291
 155:Core/Src/Assignment-THWTAM001.c ****         seconds = 0;
 1087              		.loc 1 155 17 is_stmt 0 view .LVU292
 1088 004c 064B     		ldr	r3, .L64+12
 1089 004e 0132     		adds	r2, r2, #1
 1090 0050 1A70     		strb	r2, [r3]
 156:Core/Src/Assignment-THWTAM001.c ****     }
 1091              		.loc 1 156 9 is_stmt 1 view .LVU293
 156:Core/Src/Assignment-THWTAM001.c ****     }
 1092              		.loc 1 156 17 is_stmt 0 view .LVU294
 1093 0052 034B     		ldr	r3, .L64+4
 1094 0054 0022     		movs	r2, #0
 1095 0056 1A70     		strb	r2, [r3]
 1096 0058 EAE7     		b	.L61
 1097              	.L65:
 1098 005a C046     		.align	2
 1099              	.L64:
 1100 005c 00000000 		.word	hundredths
 1101 0060 00000000 		.word	seconds
 1102 0064 00000000 		.word	pastTenSecs
 1103 0068 00000000 		.word	minutes
 1104 006c 00000000 		.word	pastTenMinutes
 1105 0070 00200040 		.word	1073750016
 1106              		.cfi_endproc
 1107              	.LFE49:
 1109              		.section	.text.checkPB,"ax",%progbits
 1110              		.align	1
 1111              		.global	checkPB
 1112              		.syntax unified
 1113              		.code	16
 1114              		.thumb_func
 1116              	checkPB:
 1117              	.LFB50:
 161:Core/Src/Assignment-THWTAM001.c **** void checkPB(void){
 1118              		.loc 1 161 19 is_stmt 1 view -0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122 0000 10B5     		push	{r4, lr}
 1123              		.cfi_def_cfa_offset 8
 1124              		.cfi_offset 4, -8
 1125              		.cfi_offset 14, -4
 162:Core/Src/Assignment-THWTAM001.c ****     //check if push buttons are pressed
 163:Core/Src/Assignment-THWTAM001.c ****     int16_t SW0 = ((GPIOA -> IDR & GPIO_IDR_0) == 0); // start
 1126              		.loc 1 163 5 view .LVU296
 1127              		.loc 1 163 27 is_stmt 0 view .LVU297
 1128 0002 9023     		movs	r3, #144
 1129 0004 DB05     		lsls	r3, r3, #23
ARM GAS  /tmp/cc64fjmy.s 			page 44


 1130 0006 1869     		ldr	r0, [r3, #16]
 1131              	.LVL32:
 164:Core/Src/Assignment-THWTAM001.c ****     int16_t SW1 = ((GPIOA-> IDR & GPIO_IDR_1) == 0); // lap
 1132              		.loc 1 164 5 is_stmt 1 view .LVU298
 1133              		.loc 1 164 26 is_stmt 0 view .LVU299
 1134 0008 1A69     		ldr	r2, [r3, #16]
 1135              		.loc 1 164 33 view .LVU300
 1136 000a 0221     		movs	r1, #2
 1137 000c 1140     		ands	r1, r2
 1138              	.LVL33:
 165:Core/Src/Assignment-THWTAM001.c ****     int16_t SW2 = ((GPIOA-> IDR & GPIO_IDR_2)== 0); // stop
 1139              		.loc 1 165 5 is_stmt 1 view .LVU301
 1140              		.loc 1 165 26 is_stmt 0 view .LVU302
 1141 000e 1C69     		ldr	r4, [r3, #16]
 1142              		.loc 1 165 33 view .LVU303
 1143 0010 0422     		movs	r2, #4
 1144 0012 2240     		ands	r2, r4
 1145              	.LVL34:
 166:Core/Src/Assignment-THWTAM001.c ****     int16_t SW3 = ((GPIOA-> IDR & GPIO_IDR_3) == 0); // reset
 1146              		.loc 1 166 5 is_stmt 1 view .LVU304
 1147              		.loc 1 166 26 is_stmt 0 view .LVU305
 1148 0014 1C69     		ldr	r4, [r3, #16]
 1149              		.loc 1 166 33 view .LVU306
 1150 0016 0823     		movs	r3, #8
 1151 0018 2340     		ands	r3, r4
 1152              	.LVL35:
 167:Core/Src/Assignment-THWTAM001.c ****      
 168:Core/Src/Assignment-THWTAM001.c ****     if(SW0){
 1153              		.loc 1 168 5 is_stmt 1 view .LVU307
 1154              		.loc 1 168 7 is_stmt 0 view .LVU308
 1155 001a C007     		lsls	r0, r0, #31
 1156 001c 09D4     		bmi	.L67
 1157              	.LVL36:
 169:Core/Src/Assignment-THWTAM001.c ****         // SW0 is pressed
 170:Core/Src/Assignment-THWTAM001.c ****         startFlag = TRUE; 
 1158              		.loc 1 170 9 is_stmt 1 view .LVU309
 1159              		.loc 1 170 19 is_stmt 0 view .LVU310
 1160 001e 1848     		ldr	r0, .L72
 1161 0020 0124     		movs	r4, #1
 1162 0022 0470     		strb	r4, [r0]
 171:Core/Src/Assignment-THWTAM001.c ****         lapFlag = FALSE;
 1163              		.loc 1 171 9 is_stmt 1 view .LVU311
 1164              		.loc 1 171 17 is_stmt 0 view .LVU312
 1165 0024 174C     		ldr	r4, .L72+4
 1166 0026 0020     		movs	r0, #0
 1167 0028 2070     		strb	r0, [r4]
 172:Core/Src/Assignment-THWTAM001.c ****         stopFlag = FALSE;
 1168              		.loc 1 172 9 is_stmt 1 view .LVU313
 1169              		.loc 1 172 18 is_stmt 0 view .LVU314
 1170 002a 174C     		ldr	r4, .L72+8
 1171 002c 2070     		strb	r0, [r4]
 173:Core/Src/Assignment-THWTAM001.c ****         resetFlag = FALSE;
 1172              		.loc 1 173 9 is_stmt 1 view .LVU315
 1173              		.loc 1 173 19 is_stmt 0 view .LVU316
 1174 002e 174C     		ldr	r4, .L72+12
 1175 0030 2070     		strb	r0, [r4]
 1176              	.L67:
ARM GAS  /tmp/cc64fjmy.s 			page 45


 174:Core/Src/Assignment-THWTAM001.c ****     }
 175:Core/Src/Assignment-THWTAM001.c ****     if(SW1){
 1177              		.loc 1 175 5 is_stmt 1 view .LVU317
 1178              		.loc 1 175 7 is_stmt 0 view .LVU318
 1179 0032 0029     		cmp	r1, #0
 1180 0034 0BD1     		bne	.L68
 176:Core/Src/Assignment-THWTAM001.c ****         // SW1 is pressed
 177:Core/Src/Assignment-THWTAM001.c ****         startFlag = TRUE;
 1181              		.loc 1 177 9 is_stmt 1 view .LVU319
 1182              		.loc 1 177 19 is_stmt 0 view .LVU320
 1183 0036 1248     		ldr	r0, .L72
 1184 0038 0131     		adds	r1, r1, #1
 1185              	.LVL37:
 1186              		.loc 1 177 19 view .LVU321
 1187 003a 0170     		strb	r1, [r0]
 178:Core/Src/Assignment-THWTAM001.c ****         lapFlag = TRUE;
 1188              		.loc 1 178 9 is_stmt 1 view .LVU322
 1189              		.loc 1 178 17 is_stmt 0 view .LVU323
 1190 003c 1148     		ldr	r0, .L72+4
 1191 003e 0170     		strb	r1, [r0]
 179:Core/Src/Assignment-THWTAM001.c ****         stopFlag = FALSE;
 1192              		.loc 1 179 9 is_stmt 1 view .LVU324
 1193              		.loc 1 179 18 is_stmt 0 view .LVU325
 1194 0040 1148     		ldr	r0, .L72+8
 1195 0042 0024     		movs	r4, #0
 1196 0044 0470     		strb	r4, [r0]
 180:Core/Src/Assignment-THWTAM001.c ****         resetFlag = FALSE;
 1197              		.loc 1 180 9 is_stmt 1 view .LVU326
 1198              		.loc 1 180 19 is_stmt 0 view .LVU327
 1199 0046 1148     		ldr	r0, .L72+12
 1200 0048 0470     		strb	r4, [r0]
 181:Core/Src/Assignment-THWTAM001.c ****         updateLapFlag = TRUE;
 1201              		.loc 1 181 9 is_stmt 1 view .LVU328
 1202              		.loc 1 181 23 is_stmt 0 view .LVU329
 1203 004a 1148     		ldr	r0, .L72+16
 1204 004c 0170     		strb	r1, [r0]
 1205              	.LVL38:
 1206              	.L68:
 182:Core/Src/Assignment-THWTAM001.c ****         
 183:Core/Src/Assignment-THWTAM001.c ****     }
 184:Core/Src/Assignment-THWTAM001.c **** 
 185:Core/Src/Assignment-THWTAM001.c ****     if(SW2){
 1207              		.loc 1 185 5 is_stmt 1 view .LVU330
 1208              		.loc 1 185 7 is_stmt 0 view .LVU331
 1209 004e 002A     		cmp	r2, #0
 1210 0050 09D1     		bne	.L69
 186:Core/Src/Assignment-THWTAM001.c ****         // SW2 is pressed
 187:Core/Src/Assignment-THWTAM001.c ****         startFlag = TRUE; 
 1211              		.loc 1 187 9 is_stmt 1 view .LVU332
 1212              		.loc 1 187 19 is_stmt 0 view .LVU333
 1213 0052 0B4A     		ldr	r2, .L72
 1214              	.LVL39:
 1215              		.loc 1 187 19 view .LVU334
 1216 0054 0120     		movs	r0, #1
 1217 0056 1070     		strb	r0, [r2]
 188:Core/Src/Assignment-THWTAM001.c ****         lapFlag = FALSE;
 1218              		.loc 1 188 9 is_stmt 1 view .LVU335
ARM GAS  /tmp/cc64fjmy.s 			page 46


 1219              		.loc 1 188 17 is_stmt 0 view .LVU336
 1220 0058 0A4A     		ldr	r2, .L72+4
 1221 005a 0021     		movs	r1, #0
 1222 005c 1170     		strb	r1, [r2]
 189:Core/Src/Assignment-THWTAM001.c ****         stopFlag = TRUE;
 1223              		.loc 1 189 9 is_stmt 1 view .LVU337
 1224              		.loc 1 189 18 is_stmt 0 view .LVU338
 1225 005e 0A4A     		ldr	r2, .L72+8
 1226 0060 1070     		strb	r0, [r2]
 190:Core/Src/Assignment-THWTAM001.c ****         resetFlag = FALSE;    
 1227              		.loc 1 190 9 is_stmt 1 view .LVU339
 1228              		.loc 1 190 19 is_stmt 0 view .LVU340
 1229 0062 0A4A     		ldr	r2, .L72+12
 1230 0064 1170     		strb	r1, [r2]
 1231              	.L69:
 191:Core/Src/Assignment-THWTAM001.c **** 
 192:Core/Src/Assignment-THWTAM001.c ****     }
 193:Core/Src/Assignment-THWTAM001.c **** 
 194:Core/Src/Assignment-THWTAM001.c ****     if(SW3){
 1232              		.loc 1 194 5 is_stmt 1 view .LVU341
 1233              		.loc 1 194 7 is_stmt 0 view .LVU342
 1234 0066 002B     		cmp	r3, #0
 1235 0068 08D1     		bne	.L66
 195:Core/Src/Assignment-THWTAM001.c ****         // SW3 is pressed
 196:Core/Src/Assignment-THWTAM001.c ****         startFlag = FALSE;
 1236              		.loc 1 196 9 is_stmt 1 view .LVU343
 1237              		.loc 1 196 19 is_stmt 0 view .LVU344
 1238 006a 054A     		ldr	r2, .L72
 1239 006c 1370     		strb	r3, [r2]
 197:Core/Src/Assignment-THWTAM001.c ****         lapFlag = FALSE;
 1240              		.loc 1 197 9 is_stmt 1 view .LVU345
 1241              		.loc 1 197 17 is_stmt 0 view .LVU346
 1242 006e 054A     		ldr	r2, .L72+4
 1243 0070 1370     		strb	r3, [r2]
 198:Core/Src/Assignment-THWTAM001.c ****         stopFlag = FALSE;
 1244              		.loc 1 198 9 is_stmt 1 view .LVU347
 1245              		.loc 1 198 18 is_stmt 0 view .LVU348
 1246 0072 054A     		ldr	r2, .L72+8
 1247 0074 1370     		strb	r3, [r2]
 199:Core/Src/Assignment-THWTAM001.c ****         resetFlag = TRUE;
 1248              		.loc 1 199 9 is_stmt 1 view .LVU349
 1249              		.loc 1 199 19 is_stmt 0 view .LVU350
 1250 0076 054B     		ldr	r3, .L72+12
 1251              	.LVL40:
 1252              		.loc 1 199 19 view .LVU351
 1253 0078 0122     		movs	r2, #1
 1254 007a 1A70     		strb	r2, [r3]
 1255              	.L66:
 200:Core/Src/Assignment-THWTAM001.c ****     }
 201:Core/Src/Assignment-THWTAM001.c **** 
 202:Core/Src/Assignment-THWTAM001.c **** }
 1256              		.loc 1 202 1 view .LVU352
 1257              		@ sp needed
 1258 007c 10BD     		pop	{r4, pc}
 1259              	.L73:
 1260 007e C046     		.align	2
 1261              	.L72:
ARM GAS  /tmp/cc64fjmy.s 			page 47


 1262 0080 00000000 		.word	startFlag
 1263 0084 00000000 		.word	lapFlag
 1264 0088 00000000 		.word	stopFlag
 1265 008c 00000000 		.word	resetFlag
 1266 0090 00000000 		.word	updateLapFlag
 1267              		.cfi_endproc
 1268              	.LFE50:
 1270              		.global	__aeabi_uidiv
 1271              		.global	__aeabi_uidivmod
 1272              		.section	.rodata.BDCHelper.str1.4,"aMS",%progbits,1
 1273              		.align	2
 1274              	.LC10:
 1275 0000 30313233 		.ascii	"0123456789\000"
 1275      34353637 
 1275      383900
 1276              		.section	.text.BDCHelper,"ax",%progbits
 1277              		.align	1
 1278              		.global	BDCHelper
 1279              		.syntax unified
 1280              		.code	16
 1281              		.thumb_func
 1283              	BDCHelper:
 1284              	.LVL41:
 1285              	.LFB53:
 203:Core/Src/Assignment-THWTAM001.c **** 
 204:Core/Src/Assignment-THWTAM001.c **** void convert2BCDASCII(const uint8_t min, const uint8_t sec, const uint8_t hund, char* resultPtr){
 205:Core/Src/Assignment-THWTAM001.c **** 
 206:Core/Src/Assignment-THWTAM001.c ****     BDCHelper(min, mins); // convert minutes to BCD equivalent
 207:Core/Src/Assignment-THWTAM001.c ****     counter = 0; // reset counter
 208:Core/Src/Assignment-THWTAM001.c **** 
 209:Core/Src/Assignment-THWTAM001.c ****     BDCHelper(sec, secs); // convert seconds to BCD equivalent
 210:Core/Src/Assignment-THWTAM001.c ****     counter = 0; // reset counter
 211:Core/Src/Assignment-THWTAM001.c **** 
 212:Core/Src/Assignment-THWTAM001.c ****     BDCHelper(hund, hunds); // convert hundredths to BCD equivalent
 213:Core/Src/Assignment-THWTAM001.c ****     counter = 0; // reset counter
 214:Core/Src/Assignment-THWTAM001.c **** 
 215:Core/Src/Assignment-THWTAM001.c ****     if(pastTenMinutes){
 216:Core/Src/Assignment-THWTAM001.c ****         // store values as they are
 217:Core/Src/Assignment-THWTAM001.c ****         resultPtr[0] = mins[0]; 
 218:Core/Src/Assignment-THWTAM001.c ****         resultPtr[1] = mins[1];
 219:Core/Src/Assignment-THWTAM001.c ****     }
 220:Core/Src/Assignment-THWTAM001.c ****     else{
 221:Core/Src/Assignment-THWTAM001.c ****         // swap values so that zero comes first
 222:Core/Src/Assignment-THWTAM001.c ****         resultPtr[1] = mins[0]; 
 223:Core/Src/Assignment-THWTAM001.c ****         resultPtr[0] = mins[1];
 224:Core/Src/Assignment-THWTAM001.c ****     }
 225:Core/Src/Assignment-THWTAM001.c **** 
 226:Core/Src/Assignment-THWTAM001.c ****     resultPtr[2] = ':'; // add colon to time format
 227:Core/Src/Assignment-THWTAM001.c **** 
 228:Core/Src/Assignment-THWTAM001.c ****     if(pastTenSecs){
 229:Core/Src/Assignment-THWTAM001.c ****         resultPtr[3] = secs[0];
 230:Core/Src/Assignment-THWTAM001.c ****         resultPtr[4] = secs[1];
 231:Core/Src/Assignment-THWTAM001.c ****      }
 232:Core/Src/Assignment-THWTAM001.c ****      else{
 233:Core/Src/Assignment-THWTAM001.c ****         // swap values so that zero comes first
 234:Core/Src/Assignment-THWTAM001.c ****         resultPtr[3] = 0x30;
 235:Core/Src/Assignment-THWTAM001.c ****         resultPtr[4] = secs[0];
ARM GAS  /tmp/cc64fjmy.s 			page 48


 236:Core/Src/Assignment-THWTAM001.c ****      }
 237:Core/Src/Assignment-THWTAM001.c **** 
 238:Core/Src/Assignment-THWTAM001.c ****     resultPtr[5] = '.'; // add decimal point to time format
 239:Core/Src/Assignment-THWTAM001.c ****     resultPtr[6] = hunds[0]; resultPtr[7] = hunds[1];
 240:Core/Src/Assignment-THWTAM001.c **** 
 241:Core/Src/Assignment-THWTAM001.c **** }
 242:Core/Src/Assignment-THWTAM001.c **** 
 243:Core/Src/Assignment-THWTAM001.c **** void display(void){
 244:Core/Src/Assignment-THWTAM001.c **** 
 245:Core/Src/Assignment-THWTAM001.c ****     lcd_command(CLEAR); // clear lcd
 246:Core/Src/Assignment-THWTAM001.c ****     if (resetFlag){
 247:Core/Src/Assignment-THWTAM001.c ****         // sw3 pressed
 248:Core/Src/Assignment-THWTAM001.c ****         lcd_command(CLEAR); // clear lcd
 249:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring("Stopwatch"); // write string to lcd
 250:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 251:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring("Press SW0..."); // write string to lcd
 252:Core/Src/Assignment-THWTAM001.c ****         TIM14 -> CR1 &= ~TIM_CR1_CEN; // stop timer
 253:Core/Src/Assignment-THWTAM001.c ****         minutes = 0; seconds = 0; hundredths = 0; // reset time values to zero
 254:Core/Src/Assignment-THWTAM001.c **** 
 255:Core/Src/Assignment-THWTAM001.c ****         // turn on led pb3
 256:Core/Src/Assignment-THWTAM001.c ****         GPIOB -> ODR = 0x00000008;
 257:Core/Src/Assignment-THWTAM001.c **** 
 258:Core/Src/Assignment-THWTAM001.c ****     }
 259:Core/Src/Assignment-THWTAM001.c ****     if (startFlag && !(lapFlag || stopFlag)){
 260:Core/Src/Assignment-THWTAM001.c **** 
 261:Core/Src/Assignment-THWTAM001.c ****         // sw0 pressed, start timer
 262:Core/Src/Assignment-THWTAM001.c ****         TIM14 -> CR1 |= TIM_CR1_CEN; // start timer
 263:Core/Src/Assignment-THWTAM001.c ****         convert2BCDASCII(minutes,seconds,hundredths,time);
 264:Core/Src/Assignment-THWTAM001.c **** 
 265:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring("Time"); // write string to lcd
 266:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 267:Core/Src/Assignment-THWTAM001.c ****         
 268:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring(time);
 269:Core/Src/Assignment-THWTAM001.c **** 
 270:Core/Src/Assignment-THWTAM001.c ****         // turn on led pb0
 271:Core/Src/Assignment-THWTAM001.c ****         GPIOB -> ODR = 0x00000001;
 272:Core/Src/Assignment-THWTAM001.c ****     }
 273:Core/Src/Assignment-THWTAM001.c ****     if(startFlag && lapFlag){
 274:Core/Src/Assignment-THWTAM001.c ****         
 275:Core/Src/Assignment-THWTAM001.c ****         //sw1 pressed, take lap time
 276:Core/Src/Assignment-THWTAM001.c ****         
 277:Core/Src/Assignment-THWTAM001.c ****         if(updateLapFlag){
 278:Core/Src/Assignment-THWTAM001.c ****             convert2BCDASCII(minutes,seconds,hundredths,time);
 279:Core/Src/Assignment-THWTAM001.c **** 
 280:Core/Src/Assignment-THWTAM001.c ****         }
 281:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring("Time"); // write string to lcd
 282:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 283:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring(time); // display time on screen
 284:Core/Src/Assignment-THWTAM001.c **** 
 285:Core/Src/Assignment-THWTAM001.c **** 
 286:Core/Src/Assignment-THWTAM001.c ****         // turn on led pb1
 287:Core/Src/Assignment-THWTAM001.c ****         GPIOB -> ODR = 0x00000002;
 288:Core/Src/Assignment-THWTAM001.c **** 
 289:Core/Src/Assignment-THWTAM001.c ****     } 
 290:Core/Src/Assignment-THWTAM001.c ****     if(startFlag && stopFlag){
 291:Core/Src/Assignment-THWTAM001.c ****         // sw2 pressed, stop timer
 292:Core/Src/Assignment-THWTAM001.c ****         TIM14 -> CR1 &= ~TIM_CR1_CEN; // stop timer
ARM GAS  /tmp/cc64fjmy.s 			page 49


 293:Core/Src/Assignment-THWTAM001.c **** 
 294:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring("Time"); // write string to lcd
 295:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 296:Core/Src/Assignment-THWTAM001.c **** 
 297:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring(time); // write time to screen
 298:Core/Src/Assignment-THWTAM001.c ****      
 299:Core/Src/Assignment-THWTAM001.c **** 
 300:Core/Src/Assignment-THWTAM001.c **** 
 301:Core/Src/Assignment-THWTAM001.c ****         // turn on led pb2
 302:Core/Src/Assignment-THWTAM001.c ****         GPIOB -> ODR = 0x00000004;
 303:Core/Src/Assignment-THWTAM001.c ****     }
 304:Core/Src/Assignment-THWTAM001.c **** 
 305:Core/Src/Assignment-THWTAM001.c **** }
 306:Core/Src/Assignment-THWTAM001.c **** 
 307:Core/Src/Assignment-THWTAM001.c **** void BDCHelper(uint8_t n, char * result){
 1286              		.loc 1 307 41 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 16
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		.loc 1 307 41 is_stmt 0 view .LVU354
 1291 0000 70B5     		push	{r4, r5, r6, lr}
 1292              		.cfi_def_cfa_offset 16
 1293              		.cfi_offset 4, -16
 1294              		.cfi_offset 5, -12
 1295              		.cfi_offset 6, -8
 1296              		.cfi_offset 14, -4
 1297 0002 84B0     		sub	sp, sp, #16
 1298              		.cfi_def_cfa_offset 32
 1299 0004 0400     		movs	r4, r0
 1300 0006 0D00     		movs	r5, r1
 308:Core/Src/Assignment-THWTAM001.c ****     /**
 309:Core/Src/Assignment-THWTAM001.c ****      * convert value to BCD and then ascii helper
 310:Core/Src/Assignment-THWTAM001.c ****      */
 311:Core/Src/Assignment-THWTAM001.c **** 
 312:Core/Src/Assignment-THWTAM001.c ****     // bcd values array for 0 - 9
 313:Core/Src/Assignment-THWTAM001.c ****     uint8_t bdcValues[10] = {0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39};
 1301              		.loc 1 313 5 is_stmt 1 view .LVU355
 1302              		.loc 1 313 13 is_stmt 0 view .LVU356
 1303 0008 01AA     		add	r2, sp, #4
 1304 000a 0F4B     		ldr	r3, .L77
 1305 000c 41CB     		ldmia	r3!, {r0, r6}
 1306 000e 41C2     		stmia	r2!, {r0, r6}
 1307              	.LVL42:
 1308              		.loc 1 313 13 view .LVU357
 1309 0010 1B88     		ldrh	r3, [r3]
 1310 0012 1380     		strh	r3, [r2]
 314:Core/Src/Assignment-THWTAM001.c **** 
 315:Core/Src/Assignment-THWTAM001.c ****     if (n >= 10){
 1311              		.loc 1 315 5 is_stmt 1 view .LVU358
 1312              		.loc 1 315 8 is_stmt 0 view .LVU359
 1313 0014 092C     		cmp	r4, #9
 1314 0016 0ED8     		bhi	.L76
 1315              	.LVL43:
 1316              	.L75:
 316:Core/Src/Assignment-THWTAM001.c ****         BDCHelper(n/10, result); // call BCDHelper again
 317:Core/Src/Assignment-THWTAM001.c ****     }
 318:Core/Src/Assignment-THWTAM001.c **** 
ARM GAS  /tmp/cc64fjmy.s 			page 50


 319:Core/Src/Assignment-THWTAM001.c ****     uint8_t digit = n%10;
 1317              		.loc 1 319 5 is_stmt 1 view .LVU360
 1318              		.loc 1 319 13 is_stmt 0 view .LVU361
 1319 0018 0A21     		movs	r1, #10
 1320 001a 2000     		movs	r0, r4
 1321 001c FFF7FEFF 		bl	__aeabi_uidivmod
 1322              	.LVL44:
 1323 0020 C9B2     		uxtb	r1, r1
 1324              	.LVL45:
 320:Core/Src/Assignment-THWTAM001.c ****     result[counter] = bdcValues[digit]; // add value to result array/pointer
 1325              		.loc 1 320 5 is_stmt 1 view .LVU362
 1326              		.loc 1 320 11 is_stmt 0 view .LVU363
 1327 0022 0A4B     		ldr	r3, .L77+4
 1328 0024 1A68     		ldr	r2, [r3]
 1329              		.loc 1 320 32 view .LVU364
 1330 0026 01A8     		add	r0, sp, #4
 1331 0028 415C     		ldrb	r1, [r0, r1]
 1332              	.LVL46:
 1333              		.loc 1 320 21 view .LVU365
 1334 002a A954     		strb	r1, [r5, r2]
 321:Core/Src/Assignment-THWTAM001.c ****     counter++; // increment counter
 1335              		.loc 1 321 5 is_stmt 1 view .LVU366
 1336              		.loc 1 321 12 is_stmt 0 view .LVU367
 1337 002c 1A68     		ldr	r2, [r3]
 1338 002e 0132     		adds	r2, r2, #1
 1339 0030 1A60     		str	r2, [r3]
 322:Core/Src/Assignment-THWTAM001.c **** }
 1340              		.loc 1 322 1 view .LVU368
 1341 0032 04B0     		add	sp, sp, #16
 1342              		@ sp needed
 1343              	.LVL47:
 1344              		.loc 1 322 1 view .LVU369
 1345 0034 70BD     		pop	{r4, r5, r6, pc}
 1346              	.LVL48:
 1347              	.L76:
 316:Core/Src/Assignment-THWTAM001.c ****     }
 1348              		.loc 1 316 9 is_stmt 1 view .LVU370
 1349 0036 0A21     		movs	r1, #10
 1350              	.LVL49:
 316:Core/Src/Assignment-THWTAM001.c ****     }
 1351              		.loc 1 316 9 is_stmt 0 view .LVU371
 1352 0038 2000     		movs	r0, r4
 1353 003a FFF7FEFF 		bl	__aeabi_uidiv
 1354              	.LVL50:
 1355 003e C0B2     		uxtb	r0, r0
 1356 0040 2900     		movs	r1, r5
 1357 0042 FFF7FEFF 		bl	BDCHelper
 1358              	.LVL51:
 1359 0046 E7E7     		b	.L75
 1360              	.L78:
 1361              		.align	2
 1362              	.L77:
 1363 0048 00000000 		.word	.LC10
 1364 004c 00000000 		.word	counter
 1365              		.cfi_endproc
 1366              	.LFE53:
 1368              		.section	.text.convert2BCDASCII,"ax",%progbits
ARM GAS  /tmp/cc64fjmy.s 			page 51


 1369              		.align	1
 1370              		.global	convert2BCDASCII
 1371              		.syntax unified
 1372              		.code	16
 1373              		.thumb_func
 1375              	convert2BCDASCII:
 1376              	.LVL52:
 1377              	.LFB51:
 204:Core/Src/Assignment-THWTAM001.c **** 
 1378              		.loc 1 204 97 is_stmt 1 view -0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 204:Core/Src/Assignment-THWTAM001.c **** 
 1382              		.loc 1 204 97 is_stmt 0 view .LVU373
 1383 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1384              		.cfi_def_cfa_offset 20
 1385              		.cfi_offset 4, -20
 1386              		.cfi_offset 5, -16
 1387              		.cfi_offset 6, -12
 1388              		.cfi_offset 7, -8
 1389              		.cfi_offset 14, -4
 1390 0002 C646     		mov	lr, r8
 1391 0004 00B5     		push	{lr}
 1392              		.cfi_def_cfa_offset 24
 1393              		.cfi_offset 8, -24
 1394 0006 8846     		mov	r8, r1
 1395 0008 1700     		movs	r7, r2
 1396 000a 1C00     		movs	r4, r3
 206:Core/Src/Assignment-THWTAM001.c ****     counter = 0; // reset counter
 1397              		.loc 1 206 5 is_stmt 1 view .LVU374
 1398 000c 1C49     		ldr	r1, .L84
 1399              	.LVL53:
 206:Core/Src/Assignment-THWTAM001.c ****     counter = 0; // reset counter
 1400              		.loc 1 206 5 is_stmt 0 view .LVU375
 1401 000e FFF7FEFF 		bl	BDCHelper
 1402              	.LVL54:
 207:Core/Src/Assignment-THWTAM001.c **** 
 1403              		.loc 1 207 5 is_stmt 1 view .LVU376
 207:Core/Src/Assignment-THWTAM001.c **** 
 1404              		.loc 1 207 13 is_stmt 0 view .LVU377
 1405 0012 1C4D     		ldr	r5, .L84+4
 1406 0014 0026     		movs	r6, #0
 1407 0016 2E60     		str	r6, [r5]
 209:Core/Src/Assignment-THWTAM001.c ****     counter = 0; // reset counter
 1408              		.loc 1 209 5 is_stmt 1 view .LVU378
 1409 0018 1B49     		ldr	r1, .L84+8
 1410 001a 4046     		mov	r0, r8
 1411 001c FFF7FEFF 		bl	BDCHelper
 1412              	.LVL55:
 210:Core/Src/Assignment-THWTAM001.c **** 
 1413              		.loc 1 210 5 view .LVU379
 210:Core/Src/Assignment-THWTAM001.c **** 
 1414              		.loc 1 210 13 is_stmt 0 view .LVU380
 1415 0020 2E60     		str	r6, [r5]
 212:Core/Src/Assignment-THWTAM001.c ****     counter = 0; // reset counter
 1416              		.loc 1 212 5 is_stmt 1 view .LVU381
ARM GAS  /tmp/cc64fjmy.s 			page 52


 1417 0022 1A49     		ldr	r1, .L84+12
 1418 0024 3800     		movs	r0, r7
 1419 0026 FFF7FEFF 		bl	BDCHelper
 1420              	.LVL56:
 213:Core/Src/Assignment-THWTAM001.c **** 
 1421              		.loc 1 213 5 view .LVU382
 213:Core/Src/Assignment-THWTAM001.c **** 
 1422              		.loc 1 213 13 is_stmt 0 view .LVU383
 1423 002a 2E60     		str	r6, [r5]
 215:Core/Src/Assignment-THWTAM001.c ****         // store values as they are
 1424              		.loc 1 215 5 is_stmt 1 view .LVU384
 215:Core/Src/Assignment-THWTAM001.c ****         // store values as they are
 1425              		.loc 1 215 8 is_stmt 0 view .LVU385
 1426 002c 184B     		ldr	r3, .L84+16
 1427 002e 1B78     		ldrb	r3, [r3]
 215:Core/Src/Assignment-THWTAM001.c ****         // store values as they are
 1428              		.loc 1 215 7 view .LVU386
 1429 0030 002B     		cmp	r3, #0
 1430 0032 19D0     		beq	.L80
 217:Core/Src/Assignment-THWTAM001.c ****         resultPtr[1] = mins[1];
 1431              		.loc 1 217 9 is_stmt 1 view .LVU387
 217:Core/Src/Assignment-THWTAM001.c ****         resultPtr[1] = mins[1];
 1432              		.loc 1 217 28 is_stmt 0 view .LVU388
 1433 0034 124B     		ldr	r3, .L84
 1434 0036 1A78     		ldrb	r2, [r3]
 217:Core/Src/Assignment-THWTAM001.c ****         resultPtr[1] = mins[1];
 1435              		.loc 1 217 22 view .LVU389
 1436 0038 2270     		strb	r2, [r4]
 218:Core/Src/Assignment-THWTAM001.c ****     }
 1437              		.loc 1 218 9 is_stmt 1 view .LVU390
 218:Core/Src/Assignment-THWTAM001.c ****     }
 1438              		.loc 1 218 28 is_stmt 0 view .LVU391
 1439 003a 5B78     		ldrb	r3, [r3, #1]
 218:Core/Src/Assignment-THWTAM001.c ****     }
 1440              		.loc 1 218 22 view .LVU392
 1441 003c 6370     		strb	r3, [r4, #1]
 1442              	.L81:
 226:Core/Src/Assignment-THWTAM001.c **** 
 1443              		.loc 1 226 5 is_stmt 1 view .LVU393
 226:Core/Src/Assignment-THWTAM001.c **** 
 1444              		.loc 1 226 18 is_stmt 0 view .LVU394
 1445 003e 3A23     		movs	r3, #58
 1446 0040 A370     		strb	r3, [r4, #2]
 228:Core/Src/Assignment-THWTAM001.c ****         resultPtr[3] = secs[0];
 1447              		.loc 1 228 5 is_stmt 1 view .LVU395
 228:Core/Src/Assignment-THWTAM001.c ****         resultPtr[3] = secs[0];
 1448              		.loc 1 228 8 is_stmt 0 view .LVU396
 1449 0042 144B     		ldr	r3, .L84+20
 1450 0044 1B78     		ldrb	r3, [r3]
 228:Core/Src/Assignment-THWTAM001.c ****         resultPtr[3] = secs[0];
 1451              		.loc 1 228 7 view .LVU397
 1452 0046 002B     		cmp	r3, #0
 1453 0048 14D0     		beq	.L82
 229:Core/Src/Assignment-THWTAM001.c ****         resultPtr[4] = secs[1];
 1454              		.loc 1 229 9 is_stmt 1 view .LVU398
 229:Core/Src/Assignment-THWTAM001.c ****         resultPtr[4] = secs[1];
 1455              		.loc 1 229 28 is_stmt 0 view .LVU399
ARM GAS  /tmp/cc64fjmy.s 			page 53


 1456 004a 0F4B     		ldr	r3, .L84+8
 1457 004c 1A78     		ldrb	r2, [r3]
 229:Core/Src/Assignment-THWTAM001.c ****         resultPtr[4] = secs[1];
 1458              		.loc 1 229 22 view .LVU400
 1459 004e E270     		strb	r2, [r4, #3]
 230:Core/Src/Assignment-THWTAM001.c ****      }
 1460              		.loc 1 230 9 is_stmt 1 view .LVU401
 230:Core/Src/Assignment-THWTAM001.c ****      }
 1461              		.loc 1 230 28 is_stmt 0 view .LVU402
 1462 0050 5B78     		ldrb	r3, [r3, #1]
 230:Core/Src/Assignment-THWTAM001.c ****      }
 1463              		.loc 1 230 22 view .LVU403
 1464 0052 2371     		strb	r3, [r4, #4]
 1465              	.L83:
 238:Core/Src/Assignment-THWTAM001.c ****     resultPtr[6] = hunds[0]; resultPtr[7] = hunds[1];
 1466              		.loc 1 238 5 is_stmt 1 view .LVU404
 238:Core/Src/Assignment-THWTAM001.c ****     resultPtr[6] = hunds[0]; resultPtr[7] = hunds[1];
 1467              		.loc 1 238 18 is_stmt 0 view .LVU405
 1468 0054 2E23     		movs	r3, #46
 1469 0056 6371     		strb	r3, [r4, #5]
 239:Core/Src/Assignment-THWTAM001.c **** 
 1470              		.loc 1 239 5 is_stmt 1 view .LVU406
 239:Core/Src/Assignment-THWTAM001.c **** 
 1471              		.loc 1 239 25 is_stmt 0 view .LVU407
 1472 0058 0C4B     		ldr	r3, .L84+12
 1473 005a 1A78     		ldrb	r2, [r3]
 239:Core/Src/Assignment-THWTAM001.c **** 
 1474              		.loc 1 239 18 view .LVU408
 1475 005c A271     		strb	r2, [r4, #6]
 239:Core/Src/Assignment-THWTAM001.c **** 
 1476              		.loc 1 239 30 is_stmt 1 view .LVU409
 239:Core/Src/Assignment-THWTAM001.c **** 
 1477              		.loc 1 239 50 is_stmt 0 view .LVU410
 1478 005e 5B78     		ldrb	r3, [r3, #1]
 239:Core/Src/Assignment-THWTAM001.c **** 
 1479              		.loc 1 239 43 view .LVU411
 1480 0060 E371     		strb	r3, [r4, #7]
 241:Core/Src/Assignment-THWTAM001.c **** 
 1481              		.loc 1 241 1 view .LVU412
 1482              		@ sp needed
 1483              	.LVL57:
 241:Core/Src/Assignment-THWTAM001.c **** 
 1484              		.loc 1 241 1 view .LVU413
 1485 0062 80BC     		pop	{r7}
 1486 0064 B846     		mov	r8, r7
 1487 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 1488              	.LVL58:
 1489              	.L80:
 222:Core/Src/Assignment-THWTAM001.c ****         resultPtr[0] = mins[1];
 1490              		.loc 1 222 9 is_stmt 1 view .LVU414
 222:Core/Src/Assignment-THWTAM001.c ****         resultPtr[0] = mins[1];
 1491              		.loc 1 222 28 is_stmt 0 view .LVU415
 1492 0068 054B     		ldr	r3, .L84
 1493 006a 1A78     		ldrb	r2, [r3]
 222:Core/Src/Assignment-THWTAM001.c ****         resultPtr[0] = mins[1];
 1494              		.loc 1 222 22 view .LVU416
 1495 006c 6270     		strb	r2, [r4, #1]
ARM GAS  /tmp/cc64fjmy.s 			page 54


 223:Core/Src/Assignment-THWTAM001.c ****     }
 1496              		.loc 1 223 9 is_stmt 1 view .LVU417
 223:Core/Src/Assignment-THWTAM001.c ****     }
 1497              		.loc 1 223 28 is_stmt 0 view .LVU418
 1498 006e 5B78     		ldrb	r3, [r3, #1]
 223:Core/Src/Assignment-THWTAM001.c ****     }
 1499              		.loc 1 223 22 view .LVU419
 1500 0070 2370     		strb	r3, [r4]
 1501 0072 E4E7     		b	.L81
 1502              	.L82:
 234:Core/Src/Assignment-THWTAM001.c ****         resultPtr[4] = secs[0];
 1503              		.loc 1 234 9 is_stmt 1 view .LVU420
 234:Core/Src/Assignment-THWTAM001.c ****         resultPtr[4] = secs[0];
 1504              		.loc 1 234 22 is_stmt 0 view .LVU421
 1505 0074 3023     		movs	r3, #48
 1506 0076 E370     		strb	r3, [r4, #3]
 235:Core/Src/Assignment-THWTAM001.c ****      }
 1507              		.loc 1 235 9 is_stmt 1 view .LVU422
 235:Core/Src/Assignment-THWTAM001.c ****      }
 1508              		.loc 1 235 28 is_stmt 0 view .LVU423
 1509 0078 034B     		ldr	r3, .L84+8
 1510 007a 1B78     		ldrb	r3, [r3]
 235:Core/Src/Assignment-THWTAM001.c ****      }
 1511              		.loc 1 235 22 view .LVU424
 1512 007c 2371     		strb	r3, [r4, #4]
 1513 007e E9E7     		b	.L83
 1514              	.L85:
 1515              		.align	2
 1516              	.L84:
 1517 0080 00000000 		.word	mins
 1518 0084 00000000 		.word	counter
 1519 0088 00000000 		.word	secs
 1520 008c 00000000 		.word	hunds
 1521 0090 00000000 		.word	pastTenMinutes
 1522 0094 00000000 		.word	pastTenSecs
 1523              		.cfi_endproc
 1524              	.LFE51:
 1526              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 1527              		.align	2
 1528              	.LC20:
 1529 0000 53746F70 		.ascii	"Stopwatch\000"
 1529      77617463 
 1529      6800
 1530 000a 0000     		.align	2
 1531              	.LC22:
 1532 000c 50726573 		.ascii	"Press SW0...\000"
 1532      73205357 
 1532      302E2E2E 
 1532      00
 1533 0019 000000   		.align	2
 1534              	.LC31:
 1535 001c 54696D65 		.ascii	"Time\000"
 1535      00
 1536              		.section	.text.display,"ax",%progbits
 1537              		.align	1
 1538              		.global	display
 1539              		.syntax unified
ARM GAS  /tmp/cc64fjmy.s 			page 55


 1540              		.code	16
 1541              		.thumb_func
 1543              	display:
 1544              	.LFB52:
 243:Core/Src/Assignment-THWTAM001.c **** 
 1545              		.loc 1 243 19 is_stmt 1 view -0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 1549 0000 70B5     		push	{r4, r5, r6, lr}
 1550              		.cfi_def_cfa_offset 16
 1551              		.cfi_offset 4, -16
 1552              		.cfi_offset 5, -12
 1553              		.cfi_offset 6, -8
 1554              		.cfi_offset 14, -4
 245:Core/Src/Assignment-THWTAM001.c ****     if (resetFlag){
 1555              		.loc 1 245 5 view .LVU426
 1556 0002 0120     		movs	r0, #1
 1557 0004 FFF7FEFF 		bl	lcd_command
 1558              	.LVL59:
 246:Core/Src/Assignment-THWTAM001.c ****         // sw3 pressed
 1559              		.loc 1 246 5 view .LVU427
 246:Core/Src/Assignment-THWTAM001.c ****         // sw3 pressed
 1560              		.loc 1 246 9 is_stmt 0 view .LVU428
 1561 0008 414B     		ldr	r3, .L96
 1562 000a 1B78     		ldrb	r3, [r3]
 246:Core/Src/Assignment-THWTAM001.c ****         // sw3 pressed
 1563              		.loc 1 246 8 view .LVU429
 1564 000c 002B     		cmp	r3, #0
 1565 000e 2CD1     		bne	.L92
 1566              	.L87:
 259:Core/Src/Assignment-THWTAM001.c **** 
 1567              		.loc 1 259 5 is_stmt 1 view .LVU430
 259:Core/Src/Assignment-THWTAM001.c **** 
 1568              		.loc 1 259 9 is_stmt 0 view .LVU431
 1569 0010 404B     		ldr	r3, .L96+4
 1570 0012 1B78     		ldrb	r3, [r3]
 259:Core/Src/Assignment-THWTAM001.c **** 
 1571              		.loc 1 259 8 view .LVU432
 1572 0014 002B     		cmp	r3, #0
 1573 0016 07D0     		beq	.L88
 259:Core/Src/Assignment-THWTAM001.c **** 
 1574              		.loc 1 259 24 discriminator 1 view .LVU433
 1575 0018 3F4B     		ldr	r3, .L96+8
 1576 001a 1B78     		ldrb	r3, [r3]
 259:Core/Src/Assignment-THWTAM001.c **** 
 1577              		.loc 1 259 19 discriminator 1 view .LVU434
 1578 001c 002B     		cmp	r3, #0
 1579 001e 03D1     		bne	.L88
 259:Core/Src/Assignment-THWTAM001.c **** 
 1580              		.loc 1 259 32 discriminator 2 view .LVU435
 1581 0020 3E4B     		ldr	r3, .L96+12
 1582 0022 1B78     		ldrb	r3, [r3]
 259:Core/Src/Assignment-THWTAM001.c **** 
 1583              		.loc 1 259 22 discriminator 2 view .LVU436
 1584 0024 002B     		cmp	r3, #0
 1585 0026 3CD0     		beq	.L93
ARM GAS  /tmp/cc64fjmy.s 			page 56


 1586              	.L88:
 273:Core/Src/Assignment-THWTAM001.c ****         
 1587              		.loc 1 273 5 is_stmt 1 view .LVU437
 273:Core/Src/Assignment-THWTAM001.c ****         
 1588              		.loc 1 273 8 is_stmt 0 view .LVU438
 1589 0028 3A4B     		ldr	r3, .L96+4
 1590 002a 1B78     		ldrb	r3, [r3]
 273:Core/Src/Assignment-THWTAM001.c ****         
 1591              		.loc 1 273 7 view .LVU439
 1592 002c 002B     		cmp	r3, #0
 1593 002e 13D0     		beq	.L89
 273:Core/Src/Assignment-THWTAM001.c ****         
 1594              		.loc 1 273 18 discriminator 1 view .LVU440
 1595 0030 394B     		ldr	r3, .L96+8
 1596 0032 1B78     		ldrb	r3, [r3]
 1597 0034 002B     		cmp	r3, #0
 1598 0036 0FD0     		beq	.L89
 277:Core/Src/Assignment-THWTAM001.c ****             convert2BCDASCII(minutes,seconds,hundredths,time);
 1599              		.loc 1 277 9 is_stmt 1 view .LVU441
 277:Core/Src/Assignment-THWTAM001.c ****             convert2BCDASCII(minutes,seconds,hundredths,time);
 1600              		.loc 1 277 12 is_stmt 0 view .LVU442
 1601 0038 394B     		ldr	r3, .L96+16
 1602 003a 1B78     		ldrb	r3, [r3]
 277:Core/Src/Assignment-THWTAM001.c ****             convert2BCDASCII(minutes,seconds,hundredths,time);
 1603              		.loc 1 277 11 view .LVU443
 1604 003c 002B     		cmp	r3, #0
 1605 003e 4BD1     		bne	.L94
 1606              	.L90:
 281:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 1607              		.loc 1 281 9 is_stmt 1 view .LVU444
 1608 0040 3848     		ldr	r0, .L96+20
 1609 0042 FFF7FEFF 		bl	lcd_putstring
 1610              	.LVL60:
 282:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring(time); // display time on screen
 1611              		.loc 1 282 9 view .LVU445
 1612 0046 C020     		movs	r0, #192
 1613 0048 FFF7FEFF 		bl	lcd_command
 1614              	.LVL61:
 283:Core/Src/Assignment-THWTAM001.c **** 
 1615              		.loc 1 283 9 view .LVU446
 1616 004c 3648     		ldr	r0, .L96+24
 1617 004e FFF7FEFF 		bl	lcd_putstring
 1618              	.LVL62:
 287:Core/Src/Assignment-THWTAM001.c **** 
 1619              		.loc 1 287 9 view .LVU447
 287:Core/Src/Assignment-THWTAM001.c **** 
 1620              		.loc 1 287 22 is_stmt 0 view .LVU448
 1621 0052 364B     		ldr	r3, .L96+28
 1622 0054 0222     		movs	r2, #2
 1623 0056 5A61     		str	r2, [r3, #20]
 1624              	.L89:
 290:Core/Src/Assignment-THWTAM001.c ****         // sw2 pressed, stop timer
 1625              		.loc 1 290 5 is_stmt 1 view .LVU449
 290:Core/Src/Assignment-THWTAM001.c ****         // sw2 pressed, stop timer
 1626              		.loc 1 290 8 is_stmt 0 view .LVU450
 1627 0058 2E4B     		ldr	r3, .L96+4
 1628 005a 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/cc64fjmy.s 			page 57


 290:Core/Src/Assignment-THWTAM001.c ****         // sw2 pressed, stop timer
 1629              		.loc 1 290 7 view .LVU451
 1630 005c 002B     		cmp	r3, #0
 1631 005e 03D0     		beq	.L86
 290:Core/Src/Assignment-THWTAM001.c ****         // sw2 pressed, stop timer
 1632              		.loc 1 290 18 discriminator 1 view .LVU452
 1633 0060 2E4B     		ldr	r3, .L96+12
 1634 0062 1B78     		ldrb	r3, [r3]
 1635 0064 002B     		cmp	r3, #0
 1636 0066 41D1     		bne	.L95
 1637              	.L86:
 305:Core/Src/Assignment-THWTAM001.c **** 
 1638              		.loc 1 305 1 view .LVU453
 1639              		@ sp needed
 1640 0068 70BD     		pop	{r4, r5, r6, pc}
 1641              	.L92:
 248:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring("Stopwatch"); // write string to lcd
 1642              		.loc 1 248 9 is_stmt 1 view .LVU454
 1643 006a 0120     		movs	r0, #1
 1644 006c FFF7FEFF 		bl	lcd_command
 1645              	.LVL63:
 249:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 1646              		.loc 1 249 9 view .LVU455
 1647 0070 2F48     		ldr	r0, .L96+32
 1648 0072 FFF7FEFF 		bl	lcd_putstring
 1649              	.LVL64:
 250:Core/Src/Assignment-THWTAM001.c ****         lcd_putstring("Press SW0..."); // write string to lcd
 1650              		.loc 1 250 9 view .LVU456
 1651 0076 C020     		movs	r0, #192
 1652 0078 FFF7FEFF 		bl	lcd_command
 1653              	.LVL65:
 251:Core/Src/Assignment-THWTAM001.c ****         TIM14 -> CR1 &= ~TIM_CR1_CEN; // stop timer
 1654              		.loc 1 251 9 view .LVU457
 1655 007c 2D48     		ldr	r0, .L96+36
 1656 007e FFF7FEFF 		bl	lcd_putstring
 1657              	.LVL66:
 252:Core/Src/Assignment-THWTAM001.c ****         minutes = 0; seconds = 0; hundredths = 0; // reset time values to zero
 1658              		.loc 1 252 9 view .LVU458
 252:Core/Src/Assignment-THWTAM001.c ****         minutes = 0; seconds = 0; hundredths = 0; // reset time values to zero
 1659              		.loc 1 252 15 is_stmt 0 view .LVU459
 1660 0082 2D4A     		ldr	r2, .L96+40
 1661 0084 1368     		ldr	r3, [r2]
 252:Core/Src/Assignment-THWTAM001.c ****         minutes = 0; seconds = 0; hundredths = 0; // reset time values to zero
 1662              		.loc 1 252 22 view .LVU460
 1663 0086 0121     		movs	r1, #1
 1664 0088 8B43     		bics	r3, r1
 1665 008a 1360     		str	r3, [r2]
 253:Core/Src/Assignment-THWTAM001.c **** 
 1666              		.loc 1 253 9 is_stmt 1 view .LVU461
 253:Core/Src/Assignment-THWTAM001.c **** 
 1667              		.loc 1 253 17 is_stmt 0 view .LVU462
 1668 008c 2B4A     		ldr	r2, .L96+44
 1669 008e 0023     		movs	r3, #0
 1670 0090 1370     		strb	r3, [r2]
 253:Core/Src/Assignment-THWTAM001.c **** 
 1671              		.loc 1 253 22 is_stmt 1 view .LVU463
 253:Core/Src/Assignment-THWTAM001.c **** 
ARM GAS  /tmp/cc64fjmy.s 			page 58


 1672              		.loc 1 253 30 is_stmt 0 view .LVU464
 1673 0092 2B4A     		ldr	r2, .L96+48
 1674 0094 1370     		strb	r3, [r2]
 253:Core/Src/Assignment-THWTAM001.c **** 
 1675              		.loc 1 253 35 is_stmt 1 view .LVU465
 253:Core/Src/Assignment-THWTAM001.c **** 
 1676              		.loc 1 253 46 is_stmt 0 view .LVU466
 1677 0096 2B4A     		ldr	r2, .L96+52
 1678 0098 1370     		strb	r3, [r2]
 256:Core/Src/Assignment-THWTAM001.c **** 
 1679              		.loc 1 256 9 is_stmt 1 view .LVU467
 256:Core/Src/Assignment-THWTAM001.c **** 
 1680              		.loc 1 256 22 is_stmt 0 view .LVU468
 1681 009a 244B     		ldr	r3, .L96+28
 1682 009c 0822     		movs	r2, #8
 1683 009e 5A61     		str	r2, [r3, #20]
 1684 00a0 B6E7     		b	.L87
 1685              	.L93:
 262:Core/Src/Assignment-THWTAM001.c ****         convert2BCDASCII(minutes,seconds,hundredths,time);
 1686              		.loc 1 262 9 is_stmt 1 view .LVU469
 262:Core/Src/Assignment-THWTAM001.c ****         convert2BCDASCII(minutes,seconds,hundredths,time);
 1687              		.loc 1 262 15 is_stmt 0 view .LVU470
 1688 00a2 254A     		ldr	r2, .L96+40
 1689 00a4 1368     		ldr	r3, [r2]
 262:Core/Src/Assignment-THWTAM001.c ****         convert2BCDASCII(minutes,seconds,hundredths,time);
 1690              		.loc 1 262 22 view .LVU471
 1691 00a6 0125     		movs	r5, #1
 1692 00a8 2B43     		orrs	r3, r5
 1693 00aa 1360     		str	r3, [r2]
 263:Core/Src/Assignment-THWTAM001.c **** 
 1694              		.loc 1 263 9 is_stmt 1 view .LVU472
 1695 00ac 1E4C     		ldr	r4, .L96+24
 1696 00ae 254B     		ldr	r3, .L96+52
 1697 00b0 1A78     		ldrb	r2, [r3]
 1698 00b2 234B     		ldr	r3, .L96+48
 1699 00b4 1978     		ldrb	r1, [r3]
 1700 00b6 214B     		ldr	r3, .L96+44
 1701 00b8 1878     		ldrb	r0, [r3]
 1702 00ba 2300     		movs	r3, r4
 1703 00bc FFF7FEFF 		bl	convert2BCDASCII
 1704              	.LVL67:
 265:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 1705              		.loc 1 265 9 view .LVU473
 1706 00c0 1848     		ldr	r0, .L96+20
 1707 00c2 FFF7FEFF 		bl	lcd_putstring
 1708              	.LVL68:
 266:Core/Src/Assignment-THWTAM001.c ****         
 1709              		.loc 1 266 9 view .LVU474
 1710 00c6 C020     		movs	r0, #192
 1711 00c8 FFF7FEFF 		bl	lcd_command
 1712              	.LVL69:
 268:Core/Src/Assignment-THWTAM001.c **** 
 1713              		.loc 1 268 9 view .LVU475
 1714 00cc 2000     		movs	r0, r4
 1715 00ce FFF7FEFF 		bl	lcd_putstring
 1716              	.LVL70:
 271:Core/Src/Assignment-THWTAM001.c ****     }
ARM GAS  /tmp/cc64fjmy.s 			page 59


 1717              		.loc 1 271 9 view .LVU476
 271:Core/Src/Assignment-THWTAM001.c ****     }
 1718              		.loc 1 271 22 is_stmt 0 view .LVU477
 1719 00d2 164B     		ldr	r3, .L96+28
 1720 00d4 5D61     		str	r5, [r3, #20]
 1721 00d6 A7E7     		b	.L88
 1722              	.L94:
 278:Core/Src/Assignment-THWTAM001.c **** 
 1723              		.loc 1 278 13 is_stmt 1 view .LVU478
 1724 00d8 134B     		ldr	r3, .L96+24
 1725 00da 1A4A     		ldr	r2, .L96+52
 1726 00dc 1278     		ldrb	r2, [r2]
 1727 00de 1849     		ldr	r1, .L96+48
 1728 00e0 0978     		ldrb	r1, [r1]
 1729 00e2 1648     		ldr	r0, .L96+44
 1730 00e4 0078     		ldrb	r0, [r0]
 1731 00e6 FFF7FEFF 		bl	convert2BCDASCII
 1732              	.LVL71:
 1733 00ea A9E7     		b	.L90
 1734              	.L95:
 292:Core/Src/Assignment-THWTAM001.c **** 
 1735              		.loc 1 292 9 view .LVU479
 292:Core/Src/Assignment-THWTAM001.c **** 
 1736              		.loc 1 292 15 is_stmt 0 view .LVU480
 1737 00ec 124A     		ldr	r2, .L96+40
 1738 00ee 1368     		ldr	r3, [r2]
 292:Core/Src/Assignment-THWTAM001.c **** 
 1739              		.loc 1 292 22 view .LVU481
 1740 00f0 0121     		movs	r1, #1
 1741 00f2 8B43     		bics	r3, r1
 1742 00f4 1360     		str	r3, [r2]
 294:Core/Src/Assignment-THWTAM001.c ****         lcd_command(LINE_TWO); // move cursor to next line
 1743              		.loc 1 294 9 is_stmt 1 view .LVU482
 1744 00f6 0B48     		ldr	r0, .L96+20
 1745 00f8 FFF7FEFF 		bl	lcd_putstring
 1746              	.LVL72:
 295:Core/Src/Assignment-THWTAM001.c **** 
 1747              		.loc 1 295 9 view .LVU483
 1748 00fc C020     		movs	r0, #192
 1749 00fe FFF7FEFF 		bl	lcd_command
 1750              	.LVL73:
 297:Core/Src/Assignment-THWTAM001.c ****      
 1751              		.loc 1 297 9 view .LVU484
 1752 0102 0948     		ldr	r0, .L96+24
 1753 0104 FFF7FEFF 		bl	lcd_putstring
 1754              	.LVL74:
 302:Core/Src/Assignment-THWTAM001.c ****     }
 1755              		.loc 1 302 9 view .LVU485
 302:Core/Src/Assignment-THWTAM001.c ****     }
 1756              		.loc 1 302 22 is_stmt 0 view .LVU486
 1757 0108 084B     		ldr	r3, .L96+28
 1758 010a 0422     		movs	r2, #4
 1759 010c 5A61     		str	r2, [r3, #20]
 305:Core/Src/Assignment-THWTAM001.c **** 
 1760              		.loc 1 305 1 view .LVU487
 1761 010e ABE7     		b	.L86
 1762              	.L97:
ARM GAS  /tmp/cc64fjmy.s 			page 60


 1763              		.align	2
 1764              	.L96:
 1765 0110 00000000 		.word	resetFlag
 1766 0114 00000000 		.word	startFlag
 1767 0118 00000000 		.word	lapFlag
 1768 011c 00000000 		.word	stopFlag
 1769 0120 00000000 		.word	updateLapFlag
 1770 0124 1C000000 		.word	.LC31
 1771 0128 00000000 		.word	time
 1772 012c 00040048 		.word	1207960576
 1773 0130 00000000 		.word	.LC20
 1774 0134 0C000000 		.word	.LC22
 1775 0138 00200040 		.word	1073750016
 1776 013c 00000000 		.word	minutes
 1777 0140 00000000 		.word	seconds
 1778 0144 00000000 		.word	hundredths
 1779              		.cfi_endproc
 1780              	.LFE52:
 1782              		.section	.text.main,"ax",%progbits
 1783              		.align	1
 1784              		.global	main
 1785              		.syntax unified
 1786              		.code	16
 1787              		.thumb_func
 1789              	main:
 1790              	.LFB46:
  82:Core/Src/Assignment-THWTAM001.c ****     initGPIO(); // initialise GPIO pins
 1791              		.loc 1 82 1 is_stmt 1 view -0
 1792              		.cfi_startproc
 1793              		@ Volatile: function does not return.
 1794              		@ args = 0, pretend = 0, frame = 8
 1795              		@ frame_needed = 0, uses_anonymous_args = 0
 1796 0000 00B5     		push	{lr}
 1797              		.cfi_def_cfa_offset 4
 1798              		.cfi_offset 14, -4
 1799 0002 83B0     		sub	sp, sp, #12
 1800              		.cfi_def_cfa_offset 16
  83:Core/Src/Assignment-THWTAM001.c ****     init_LCD(); // initialise lcd
 1801              		.loc 1 83 5 view .LVU489
 1802 0004 FFF7FEFF 		bl	initGPIO
 1803              	.LVL75:
  84:Core/Src/Assignment-THWTAM001.c ****     initTIM14();
 1804              		.loc 1 84 5 view .LVU490
 1805 0008 FFF7FEFF 		bl	init_LCD
 1806              	.LVL76:
  85:Core/Src/Assignment-THWTAM001.c **** 
 1807              		.loc 1 85 5 view .LVU491
 1808 000c FFF7FEFF 		bl	initTIM14
 1809              	.LVL77:
 1810 0010 02E0     		b	.L101
 1811              	.L102:
  92:Core/Src/Assignment-THWTAM001.c ****         
 1812              		.loc 1 92 9 view .LVU492
  92:Core/Src/Assignment-THWTAM001.c ****         
 1813              		.loc 1 92 23 is_stmt 0 view .LVU493
 1814 0012 084B     		ldr	r3, .L103
 1815 0014 0022     		movs	r2, #0
ARM GAS  /tmp/cc64fjmy.s 			page 61


 1816 0016 1A70     		strb	r2, [r3]
  88:Core/Src/Assignment-THWTAM001.c ****         checkPB();
 1817              		.loc 1 88 5 is_stmt 1 view .LVU494
 1818              	.L101:
  88:Core/Src/Assignment-THWTAM001.c ****         checkPB();
 1819              		.loc 1 88 5 view .LVU495
  89:Core/Src/Assignment-THWTAM001.c ****         display(); // turn leds based on flags
 1820              		.loc 1 89 9 view .LVU496
 1821 0018 FFF7FEFF 		bl	checkPB
 1822              	.LVL78:
  90:Core/Src/Assignment-THWTAM001.c ****         for( volatile int i = 0; i < 10000; i++);
 1823              		.loc 1 90 9 view .LVU497
 1824 001c FFF7FEFF 		bl	display
 1825              	.LVL79:
  91:Core/Src/Assignment-THWTAM001.c ****         updateLapFlag = FALSE; // set updateFlag to false
 1826              		.loc 1 91 9 view .LVU498
 1827              	.LBB6:
  91:Core/Src/Assignment-THWTAM001.c ****         updateLapFlag = FALSE; // set updateFlag to false
 1828              		.loc 1 91 14 view .LVU499
  91:Core/Src/Assignment-THWTAM001.c ****         updateLapFlag = FALSE; // set updateFlag to false
 1829              		.loc 1 91 27 is_stmt 0 view .LVU500
 1830 0020 0023     		movs	r3, #0
 1831 0022 0193     		str	r3, [sp, #4]
 1832              	.L99:
  91:Core/Src/Assignment-THWTAM001.c ****         updateLapFlag = FALSE; // set updateFlag to false
 1833              		.loc 1 91 36 is_stmt 1 discriminator 1 view .LVU501
 1834 0024 019A     		ldr	r2, [sp, #4]
 1835 0026 044B     		ldr	r3, .L103+4
 1836 0028 9A42     		cmp	r2, r3
 1837 002a F2DC     		bgt	.L102
  91:Core/Src/Assignment-THWTAM001.c ****         updateLapFlag = FALSE; // set updateFlag to false
 1838              		.loc 1 91 46 discriminator 3 view .LVU502
 1839 002c 019B     		ldr	r3, [sp, #4]
 1840 002e 0133     		adds	r3, r3, #1
 1841 0030 0193     		str	r3, [sp, #4]
 1842 0032 F7E7     		b	.L99
 1843              	.L104:
 1844              		.align	2
 1845              	.L103:
 1846 0034 00000000 		.word	updateLapFlag
 1847 0038 0F270000 		.word	9999
 1848              	.LBE6:
 1849              		.cfi_endproc
 1850              	.LFE46:
 1852              		.global	pastTenMinutes
 1853              		.section	.bss.pastTenMinutes,"aw",%nobits
 1856              	pastTenMinutes:
 1857 0000 00       		.space	1
 1858              		.global	pastTenSecs
 1859              		.section	.bss.pastTenSecs,"aw",%nobits
 1862              	pastTenSecs:
 1863 0000 00       		.space	1
 1864              		.global	time
 1865              		.section	.bss.time,"aw",%nobits
 1866              		.align	2
 1869              	time:
 1870 0000 00000000 		.space	8
ARM GAS  /tmp/cc64fjmy.s 			page 62


 1870      00000000 
 1871              		.global	counter
 1872              		.section	.bss.counter,"aw",%nobits
 1873              		.align	2
 1876              	counter:
 1877 0000 00000000 		.space	4
 1878              		.global	hunds
 1879              		.section	.data.hunds,"aw"
 1880              		.align	2
 1883              	hunds:
 1884 0000 3030     		.ascii	"00"
 1885              		.global	secs
 1886              		.section	.data.secs,"aw"
 1887              		.align	2
 1890              	secs:
 1891 0000 3030     		.ascii	"00"
 1892              		.global	mins
 1893              		.section	.data.mins,"aw"
 1894              		.align	2
 1897              	mins:
 1898 0000 3030     		.ascii	"00"
 1899              		.global	hundredths
 1900              		.section	.bss.hundredths,"aw",%nobits
 1903              	hundredths:
 1904 0000 00       		.space	1
 1905              		.global	seconds
 1906              		.section	.bss.seconds,"aw",%nobits
 1909              	seconds:
 1910 0000 00       		.space	1
 1911              		.global	minutes
 1912              		.section	.bss.minutes,"aw",%nobits
 1915              	minutes:
 1916 0000 00       		.space	1
 1917              		.global	updateLapFlag
 1918              		.section	.bss.updateLapFlag,"aw",%nobits
 1921              	updateLapFlag:
 1922 0000 00       		.space	1
 1923              		.global	resetFlag
 1924              		.section	.data.resetFlag,"aw"
 1927              	resetFlag:
 1928 0000 01       		.byte	1
 1929              		.global	stopFlag
 1930              		.section	.bss.stopFlag,"aw",%nobits
 1933              	stopFlag:
 1934 0000 00       		.space	1
 1935              		.global	lapFlag
 1936              		.section	.bss.lapFlag,"aw",%nobits
 1939              	lapFlag:
 1940 0000 00       		.space	1
 1941              		.global	startFlag
 1942              		.section	.bss.startFlag,"aw",%nobits
 1945              	startFlag:
 1946 0000 00       		.space	1
 1947              		.text
 1948              	.Letext0:
 1949              		.file 4 "/home/tami/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-none
 1950              		.file 5 "/home/tami/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-none
ARM GAS  /tmp/cc64fjmy.s 			page 63


 1951              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
ARM GAS  /tmp/cc64fjmy.s 			page 64


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Assignment-THWTAM001.c
     /tmp/cc64fjmy.s:19     .text.delay:0000000000000000 $t
     /tmp/cc64fjmy.s:25     .text.delay:0000000000000000 delay
     /tmp/cc64fjmy.s:78     .text.pulse_strobe:0000000000000000 $t
     /tmp/cc64fjmy.s:84     .text.pulse_strobe:0000000000000000 pulse_strobe
     /tmp/cc64fjmy.s:137    .text.pulse_strobe:0000000000000034 $d
     /tmp/cc64fjmy.s:142    .text.lcd_putchar:0000000000000000 $t
     /tmp/cc64fjmy.s:148    .text.lcd_putchar:0000000000000000 lcd_putchar
     /tmp/cc64fjmy.s:394    .text.lcd_putchar:000000000000011c $d
     /tmp/cc64fjmy.s:400    .text.lcd_putstring:0000000000000000 $t
     /tmp/cc64fjmy.s:406    .text.lcd_putstring:0000000000000000 lcd_putstring
     /tmp/cc64fjmy.s:457    .text.lcd_command:0000000000000000 $t
     /tmp/cc64fjmy.s:463    .text.lcd_command:0000000000000000 lcd_command
     /tmp/cc64fjmy.s:713    .text.lcd_command:0000000000000124 $d
     /tmp/cc64fjmy.s:720    .text.init_LCD:0000000000000000 $t
     /tmp/cc64fjmy.s:726    .text.init_LCD:0000000000000000 init_LCD
     /tmp/cc64fjmy.s:819    .text.init_LCD:0000000000000070 $d
     /tmp/cc64fjmy.s:827    .text.initGPIO:0000000000000000 $t
     /tmp/cc64fjmy.s:833    .text.initGPIO:0000000000000000 initGPIO
     /tmp/cc64fjmy.s:933    .text.initGPIO:000000000000006c $d
     /tmp/cc64fjmy.s:940    .text.initTIM14:0000000000000000 $t
     /tmp/cc64fjmy.s:946    .text.initTIM14:0000000000000000 initTIM14
     /tmp/cc64fjmy.s:1002   .text.initTIM14:0000000000000028 $d
     /tmp/cc64fjmy.s:1010   .text.TIM14_IRQHandler:0000000000000000 $t
     /tmp/cc64fjmy.s:1016   .text.TIM14_IRQHandler:0000000000000000 TIM14_IRQHandler
     /tmp/cc64fjmy.s:1100   .text.TIM14_IRQHandler:000000000000005c $d
     /tmp/cc64fjmy.s:1903   .bss.hundredths:0000000000000000 hundredths
     /tmp/cc64fjmy.s:1909   .bss.seconds:0000000000000000 seconds
     /tmp/cc64fjmy.s:1862   .bss.pastTenSecs:0000000000000000 pastTenSecs
     /tmp/cc64fjmy.s:1915   .bss.minutes:0000000000000000 minutes
     /tmp/cc64fjmy.s:1856   .bss.pastTenMinutes:0000000000000000 pastTenMinutes
     /tmp/cc64fjmy.s:1110   .text.checkPB:0000000000000000 $t
     /tmp/cc64fjmy.s:1116   .text.checkPB:0000000000000000 checkPB
     /tmp/cc64fjmy.s:1262   .text.checkPB:0000000000000080 $d
     /tmp/cc64fjmy.s:1945   .bss.startFlag:0000000000000000 startFlag
     /tmp/cc64fjmy.s:1939   .bss.lapFlag:0000000000000000 lapFlag
     /tmp/cc64fjmy.s:1933   .bss.stopFlag:0000000000000000 stopFlag
     /tmp/cc64fjmy.s:1927   .data.resetFlag:0000000000000000 resetFlag
     /tmp/cc64fjmy.s:1921   .bss.updateLapFlag:0000000000000000 updateLapFlag
     /tmp/cc64fjmy.s:1273   .rodata.BDCHelper.str1.4:0000000000000000 $d
     /tmp/cc64fjmy.s:1277   .text.BDCHelper:0000000000000000 $t
     /tmp/cc64fjmy.s:1283   .text.BDCHelper:0000000000000000 BDCHelper
     /tmp/cc64fjmy.s:1363   .text.BDCHelper:0000000000000048 $d
     /tmp/cc64fjmy.s:1876   .bss.counter:0000000000000000 counter
     /tmp/cc64fjmy.s:1369   .text.convert2BCDASCII:0000000000000000 $t
     /tmp/cc64fjmy.s:1375   .text.convert2BCDASCII:0000000000000000 convert2BCDASCII
     /tmp/cc64fjmy.s:1517   .text.convert2BCDASCII:0000000000000080 $d
     /tmp/cc64fjmy.s:1897   .data.mins:0000000000000000 mins
     /tmp/cc64fjmy.s:1890   .data.secs:0000000000000000 secs
     /tmp/cc64fjmy.s:1883   .data.hunds:0000000000000000 hunds
     /tmp/cc64fjmy.s:1527   .rodata.display.str1.4:0000000000000000 $d
     /tmp/cc64fjmy.s:1537   .text.display:0000000000000000 $t
     /tmp/cc64fjmy.s:1543   .text.display:0000000000000000 display
     /tmp/cc64fjmy.s:1765   .text.display:0000000000000110 $d
     /tmp/cc64fjmy.s:1869   .bss.time:0000000000000000 time
     /tmp/cc64fjmy.s:1783   .text.main:0000000000000000 $t
ARM GAS  /tmp/cc64fjmy.s 			page 65


     /tmp/cc64fjmy.s:1789   .text.main:0000000000000000 main
     /tmp/cc64fjmy.s:1846   .text.main:0000000000000034 $d
     /tmp/cc64fjmy.s:1857   .bss.pastTenMinutes:0000000000000000 $d
     /tmp/cc64fjmy.s:1863   .bss.pastTenSecs:0000000000000000 $d
     /tmp/cc64fjmy.s:1866   .bss.time:0000000000000000 $d
     /tmp/cc64fjmy.s:1873   .bss.counter:0000000000000000 $d
     /tmp/cc64fjmy.s:1880   .data.hunds:0000000000000000 $d
     /tmp/cc64fjmy.s:1887   .data.secs:0000000000000000 $d
     /tmp/cc64fjmy.s:1894   .data.mins:0000000000000000 $d
     /tmp/cc64fjmy.s:1904   .bss.hundredths:0000000000000000 $d
     /tmp/cc64fjmy.s:1910   .bss.seconds:0000000000000000 $d
     /tmp/cc64fjmy.s:1916   .bss.minutes:0000000000000000 $d
     /tmp/cc64fjmy.s:1922   .bss.updateLapFlag:0000000000000000 $d
     /tmp/cc64fjmy.s:1934   .bss.stopFlag:0000000000000000 $d
     /tmp/cc64fjmy.s:1940   .bss.lapFlag:0000000000000000 $d
     /tmp/cc64fjmy.s:1946   .bss.startFlag:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
__aeabi_uidivmod
